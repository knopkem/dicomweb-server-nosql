{"version":3,"sources":["webpack:///./customHooks/usePrevious.js","webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js","webpack:///./connectedComponents/ViewerRetrieveStudyData.js","webpack:///./connectedComponents/ConnectedViewerRetrieveStudyData.js"],"names":["usePrevious","value","ref","useRef","useEffect","current","scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","state","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","props","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","setState","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","updateButtonGroups","panelModules","extensionManager","modules","MODULE_TYPES","PANEL","this","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","studies","menuOptionEntry","target","icon","bottomLabel","label","unshift","t","prevProps","activeContextsChanged","prevStudies","studiesUpdated","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","className","style","padding","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","Component","_getCustomButtonComponent","CustomComponent","activeButtonsIds","map","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","document","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","PropTypes","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","array","any","modal","withTranslation","withModal","withDialog","withAppContext","utils","studyMetadataManager","setActiveViewportSpecificData","ConnectedStudyBrowser","stackLoadingProgressMap","loading","progress","studiesWithLoadingData","study","thumbnails","displaySetInstanceUID","stackId","stackProgressData","stackPercentComplete","percentComplete","onThumbnailClick","displaySet","studyMetadata","isArray","reduce","all","currentDisplaySet","displaySets","concat","ds","findDisplaySetByUID","isDerived","Modality","getSourceDisplaySet","Error","StudyBrowser","ViewportPane","children","onDrop","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","StudyInstanceUID","collect","highlighted","hovered","classNames","data-cy","propTypes","node","number","loadAndCacheDerivedDisplaySets","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","isStudyLoaded","rowSize","colSize","snackbar","useSnackbarContext","promise","catch","error","show","message","autoClose","ViewportPanes","React","useMemo","pluginName","ViewportComponent","JSON","stringify","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","height","width","supportsDrop","object","defaultProps","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","fromSideClass","styles","maxWidth","marginRight","isOpen","Number","parseInt","UIModalService","servicesManager","services","ErrorBoundaryDialog","fallbackComponent","role","onError","componentStack","useState","open","setOpen","s","name","classnames","opened","Viewer","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","studyInstanceUIDs","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","dismissAll","timepointApi","measurementApi","currentTimepointId","_mapStudiesToThumbnails","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","AppContext","appContext","ConnectedHeader","linkText","appConfig","showStudyList","undefined","linkPath","createLogoComponentFn","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","shape","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","images","getImageId","wadoRoot","imageId","altImageText","imageIndex","Math","floor","setTimepoints","setMeasurements","getActiveServer","servers","a","ConnectedViewer","OHIFStudyMetadata","metadata","OHIFSeriesMetadata","retrieveStudiesMetadata","deleteStudyMetadataPromise","makeCancelable","_promoteList","filters","isFilterStrategy","promoted","_promoteStudyDisplaySet","list","searchMethod","listCopy","response","promotedCount","arrayValues","seriesInstanceUID","promotedResponse","valueToCompare","SeriesInstanceUID","split","index","findIndex","itemToPromote","splice","_isQueryParamApplied","applied","seriesInstanceUIDs","validateFilterApplied","arrayToInspect","every","item","seriesInstanceUIDStr","validatePromoteApplied","isValid","resultSeries","validateMethod","_showUserMessage","queryParamApplied","showUserMessage","_addSeriesToStudy","sopClassHandlerModules","getData","seriesMetadata","getSeriesByUID","updateSeries","addSeries","createAndAddDisplaySetsForSeries","derivedDisplaySets","getDerivedDatasets","_updateStudyMetadataManager","get","add","_updateStudyDisplaySets","createDisplaySets","_addDerivedDisplaySets","_thinStudyData","ViewerRetrieveStudyData","cancelableSeriesPromises","cancelableStudiesPromises","setStudyData","setError","setStudies","setIsStudyLoaded","snackbarContext","useContext","filterQueryParam","maxConcurrentMetadataRequests","processStudies","studiesData","loadRemainingSeries","then","result","isCanceled","isQueryParamApplied","studyDidLoad","seriesLoader","loadNextSeries","hasNext","next","concurrentRequestsAllowed","getSeriesCount","promises","fill","loadStudies","retrieveParams","splitQueryParameterCalls","enableGoogleCloudAdapter","purgeCancellablePromises","useCallback","cancel","prevStudyInstanceUIDs","e","purge","ConnectedViewerRetrieveStudyData"],"mappings":"8GAAA,6CACe,SAASA,EAAYC,GAClC,IAAMC,EAAMC,mBAKZ,OAJAC,qBAAU,WACRF,EAAIG,QAAUJ,IACb,CAACA,IAEGC,EAAIG,U,oNCGPC,GAAgBC,EADHC,IAAQC,QACM,sBACzBC,EAA4BC,IAAKC,MAAMC,QAAvCH,wBA4FOI,EANaC,aAjFJ,SAAAC,GAAS,MAEuBA,EAAMC,UACpDC,GAHuB,EAEvBC,qBAFuB,EAEDC,sBACgC,IAAtDF,KASR,MAAO,CACLG,qBATUC,IAAgBC,WAAW,mCAUrCC,uBAReN,GAAQ,CACvBO,WAAW,EACXC,cAAe,IAOfN,oBAAqBJ,EAAMC,UAAUG,wBAId,SAAAO,GACzB,MAAO,CACLC,gCAAiC,SAACC,EAAeC,GAC/CH,EAASjB,EAAwBmB,EAAeC,SAKnC,SAACC,EAAgBC,EAAmBC,GAAa,IAEhEZ,EAGEU,EAHFV,qBACAG,EAEEO,EAFFP,uBACAJ,EACEW,EADFX,oBAGF,MAAO,CACLM,cAAeF,EAAuBE,cACtCD,UAAWD,EAAuBC,UAClCS,mBAAoB,SAAAT,GAClB,IAAMP,EAAOiB,IAAUX,GACvBN,EAAKO,WAAaP,EAAKO,UAEvBO,EAAkBJ,gCAAgCR,EAAqB,CACrEF,UAGJkB,mBAAoB,SAAAC,GAClB,IAAMnB,EAAOiB,IAAUX,GACvBN,EAAKQ,cAAgBW,EAErBL,EAAkBJ,gCAAgCR,EAAqB,CACrEF,UAGJoB,kBAAmB,WACjB,IAAMC,EAAY/B,IAAQgC,aAAanB,EAAsB,SAC7D,GAAKkB,GAAcA,EAAUT,MAASS,EAAUT,KAAKW,OAArD,CAFuB,MAGmBF,EAAUT,KAAK,GAAjDY,EAHe,EAGfA,oBACJA,GAJmB,EAGMC,SACOF,OAAS,GAC7CnC,EAAce,EAAsBqB,EAAsB,KAE5DE,kBAAmB,WACjB,IAAML,EAAY/B,IAAQgC,aAAanB,EAAsB,SAC7D,GAAKkB,GAAcA,EAAUT,MAASS,EAAUT,KAAKW,OAArD,CAFuB,IAGfC,EAAwBH,EAAUT,KAAK,GAAvCY,oBACoB,IAAxBA,GACJpC,EAAce,EAAsBqB,EAAsB,KAE5DG,mBAAoB,WAClB,IAAMN,EAAY/B,IAAQgC,aAAanB,EAAsB,SACxDkB,GAAcA,EAAUT,MAASS,EAAUT,KAAKW,QACrDnC,EAAce,EAAsB,IAEtCyB,iBAAkB,WAChB,IAAMP,EAAY/B,IAAQgC,aAAanB,EAAsB,SAC7D,GAAKkB,GAAcA,EAAUT,MAASS,EAAUT,KAAKW,OAArD,CACA,IAAMM,EAAYR,EAAUT,KAAK,GAAGa,SAASF,OAAS,EACtDnC,EAAce,EAAsB0B,QAKdhC,CAI1BiC,K,ECjGuCrC,IAAKC,MAAMC,QAA5CoC,E,EAAAA,UAAWC,E,EAAAA,kBA8DJC,EANepC,aAtDN,SAAAC,GACtB,MAAO,CACLoC,cAAepC,EAAMC,UAAUoC,OAC/BjC,oBAAqBJ,EAAMC,UAAUG,wBAId,SAAAO,GACzB,MAAO,CAEL2B,SAAU,SAACC,EAAcH,EAAehC,GAMtC,IALA,IAAMH,EAAY,GACZuC,EAAUD,EAAaE,IAAM,EAC7BC,EAAaH,EAAaI,IAAM,EAChCC,EAAeJ,EAAUE,EAEtBG,EAAI,EAAGA,EAAID,EAAcC,IAAK,CAErC,IAAMC,EAAWV,EAAcnC,UAAU4C,GACrCE,EAASD,GAAYA,EAASC,OAC9BD,GAAYA,EAASE,MACvBD,EAAS,eAGX9C,EAAUgD,KAAK,CACbF,WAGJ,IAAMV,EAAS,CACbG,UACAE,aACAzC,aAIEG,EADmBwC,EAAe,GAEpCjC,EAASuB,EAAkB,IAG7BvB,EAASsB,EAAUI,SAKN,SAACtB,EAAgBC,GAClC,IAAMkC,EAAuBlC,EAAkBsB,SACvCF,EAAuCrB,EAAvCqB,cAAehC,EAAwBW,EAAxBX,oBAEvB,MAAO,CACLkC,SAAU,SAAAC,GAAY,OACpBW,EAAqBX,EAAcH,EAAehC,OAI1BL,CAI5BoD,K,4rCC5CIC,E,YAqBJ,WAAYC,GAAO,M,iGAAA,S,EACjB,K,EAAA,eAAMA,GAAN,G,gDADiB,yCA2Gc,WAAM,IAC7BC,EAAW,EAAKD,MAAhBC,OAD6B,EAEa,EAAKtD,MAAjDuD,EAF+B,EAE/BA,SAAUC,EAFqB,EAErBA,cAAeC,EAFM,EAENA,eAC3BF,IACwBE,EAAeC,MACvC,SAAAC,GAAM,OAAIA,EAAOC,SAAuC,SAA5BD,EAAOC,QAAQC,cAG3CP,EAAOQ,QAAQ,CAAEC,GAAIR,IACrBC,EAAgBA,EAAcQ,QAC5B,SAAAL,GAAM,OAAIA,EAAOC,SAAuC,SAA5BD,EAAOC,QAAQC,YAE7C,EAAKI,SAAS,CAAEV,SAAU,KAAMC,uBApHpC,IAAMU,EAA2BC,EAA0BC,KAA1B,MAHhB,OAYjB,EAAKpE,MAAQ,CACXyD,eAAgBS,EAChBV,cAAe,IAGjB,EAAKa,oBAAsB,GAE3B,EAAKC,eAAiBA,EAAeC,KAAf,MAEtB,EAAKC,qBArBY,E,4SAwBE,WACbC,EAAeC,IAAiBC,QAAQC,IAAaC,OAE3DC,KAAKC,aAAe,CAClBC,KAAM,GACNC,MAAO,IAITR,EAAaS,SAAQ,SAAAC,GACnB,IAAMC,EAAcD,EAAeE,OAC7BC,EAAkBC,MAAMC,KAAKJ,EAAYK,gBAE/CL,EAAYM,YAAYR,SAAQ,SAAAS,GAC9B,IAAMC,EAAWL,MAAMC,KAAKG,EAAWE,SAAWP,GAC5CQ,EAAmB,EAAKzC,MAAM0C,eAAeC,MAAK,SAAAC,GAAI,OAC1DL,EAASM,SAASD,MAKdE,EAC6B,mBAA1BR,EAAWQ,YAClBR,EAAWQ,WAAW,EAAK9C,MAAM+C,SAEnC,GAAIN,IAAqBK,EAAY,CACnC,IAAME,EAAkB,CACtBpH,MAAO0G,EAAWW,OAClBC,KAAMZ,EAAWY,KACjBC,YAAab,EAAWc,OAEpBjB,EAAOG,EAAWH,MAAQ,QAEhC,EAAKT,aAAaS,GAAMvC,KAAKoD,UAMnCvB,KAAKC,aAAaC,KAAK0B,QAAQ,CAC7BzH,MAAO,UACPsH,KAAM,WACNC,YAAa1B,KAAKzB,MAAMsD,EAAE,c,yCAIXC,GACjB,IAAMC,EACJD,EAAUb,iBAAmBjB,KAAKzB,MAAM0C,eAEpCe,EAAcF,EAAUR,QACxBA,EAAUtB,KAAKzB,MAAM+C,QACrB/B,EAAsBS,KAAKT,oBAE7B0C,GAAiB,EAErB,GAAID,EAAYrF,SAAW2E,EAAQ3E,OACjCsF,GAAiB,OAEjB,IAAK,IAAIlE,EAAI,EAAGA,EAAIuD,EAAQ3E,OAAQoB,IAClC,GAAIuD,EAAQvD,GAAGmE,OAAOvF,SAAW4C,EAAoBxB,GAAI,CACvDwB,EAAoBxB,GAAKuD,EAAQvD,GAAGmE,OAAOvF,OAE3CsF,GAAiB,EACjB,MAKFA,GACFjC,KAAKN,qBAGHqC,GACF/B,KAAKb,SACH,CACER,eAAgBU,EAA0BC,KAAKU,OAEjDA,KAAKmC,kC,+BAsBF,WACDC,EAAmBC,EAAqB/C,KAC5CU,KACAA,KAAK9E,MAAMyD,eACXqB,KAAK9E,MAAMwD,eAGP4D,EAAU,SAACC,EAAMpI,GACrB,EAAKoE,MAAMiE,sBAAsBD,EAAMpI,IAEnCsI,EAAcH,EAAQ7C,KAAKO,KAAM,QACjC0C,EAAeJ,EAAQ7C,KAAKO,KAAM,SAExC,OACE,oCACE,yBAAK2C,UAAU,cACb,yBAAKA,UAAU,wBAAwBC,MAAO,CAAEC,QAAS,SACvD,kBAAC,IAAD,CACE/D,QAASkB,KAAKC,aAAaC,KAC3B/F,MAAO6F,KAAKzB,MAAMuE,uBAAyB,GAC3CC,eAAgBN,KAGnBL,EACD,kBAAC,EAAD,MACA,yBACEO,UAAU,0BACVC,MAAO,CAAEI,WAAY,SAEpBhD,KAAKC,aAAaE,MAAMxD,QACvB,kBAAC,IAAD,CACEmC,QAASkB,KAAKC,aAAaE,MAC3BhG,MAAO6F,KAAKzB,MAAM0E,wBAA0B,GAC5CF,eAAgBL,Y,8BAlLPQ,aA4LzB,SAASC,EAA0BtE,EAAQH,GACzC,IAAM0E,EAAkBvE,EAAOuE,gBAI/B,GAHoD,mBAApBA,EAGV,CACpB,IACMC,EAAmB3E,EAAc4E,KAAI,SAAAzE,GAAM,OAAIA,EAAOI,MACtDsE,EAAWF,EAAiBjC,SAASvC,EAAOI,IAElD,OACE,kBAACmE,EAAD,CACEI,cANkBxD,KAOlByD,qBAAsBC,EAA0BjE,KAAKO,MACrDnB,OAAQA,EACR8E,IAAK9E,EAAOI,GACZP,cAAe2E,EACfE,SAAUA,KAMlB,SAASK,EAA8B/E,EAAQH,GAAe,IAExDmF,EAFwD,OAGtDC,EAAejF,EAAOkF,QAAQT,KAAI,SAAAU,GAOtC,OANAA,EAAYC,QAAUP,EAA0BjE,KAAK,EAAMuE,GAEvDtF,EAAc4E,KAAI,SAAAzE,GAAM,OAAIA,EAAOI,MAAIiF,QAAQF,EAAY/E,KAAO,IACpE4E,EAAgBG,EAAY/E,IAGvB+E,KAGT,OACE,kBAAC,IAAD,CACEL,IAAK9E,EAAOI,GACZ0C,MAAO9C,EAAO8C,MACdF,KAAM5C,EAAO4C,KACbsC,QAASD,EACTD,cAAeA,IAKrB,SAASM,EAA2BtF,EAAQH,GAC1C,OACE,kBAAC,IAAD,CACEiF,IAAK9E,EAAOI,GACZ0C,MAAO9C,EAAO8C,MACdF,KAAM5C,EAAO4C,KACbwC,QAASP,EAA0BjE,KAAKO,KAAMnB,GAC9C0E,SAAU7E,EAAc4E,KAAI,SAAAzE,GAAM,OAAIA,EAAOI,MAAImC,SAASvC,EAAOI,MAQvE,SAASoD,EAAqB1D,EAAgBD,GAC5C,IAAM0F,EAAQpE,KACd,OAAOrB,EAAe2E,KAAI,SAAAzE,GACxB,IAAMwF,EAAqBxF,EAAOuE,gBAC5BkB,EAA6BzF,EAAOkF,SAAWlF,EAAOkF,QAAQpH,OAEpE,OAAI0H,EACKlB,EAA0B7D,KAAK8E,EAAOvF,EAAQH,GAGnD4F,EACKV,EAA8BtE,KAAK8E,EAAOvF,EAAQH,GAGpDyF,EAA2B7E,KAAK8E,EAAOvF,EAAQH,MAgB1D,SAASgF,EAA0B7E,EAAQ0F,EAAKhG,GAAO,IAC7CG,EAAkBsB,KAAK9E,MAAvBwD,cAER,GAAIG,EAAO2F,YAAa,CACtB,IAAM1F,EAAU2F,OAAOC,OAAO,CAAEH,OAAO1F,EAAO8F,gBAC9CnJ,IAAgBC,WAAWoD,EAAO2F,YAAa1F,GAMjD,GAAoB,kBAAhBD,EAAO+F,KAA0B,CACnC,IAAMC,EAAYnG,EAAcQ,QAC9B,gBAAGJ,EAAH,EAAGA,QAAH,OAAiBA,IAAYA,EAAQgG,aAEvC9E,KAAKb,SAAS,CAAET,cAAe,GAAF,SAAMmG,GAAN,CAAiBhG,UACrB,YAAhBA,EAAO+F,MAChB5E,KAAKR,eAAeX,GAOxB,SAASQ,IAA4B,WAC7B0F,EAAiBnF,IAAiBC,QAAQC,IAAakF,SACvD5F,EAA2B,GAajC,OAXA2F,EAAe3E,SAAQ,SAAA6E,GAAa,MACMA,EAAU1E,OAA1C2E,EAD0B,EAC1BA,YAAavE,EADa,EACbA,eACrBuE,EAAY9E,SAAQ,SAAA+E,GAClB,IAAMpE,EAAUoE,EAAWpE,SAAWJ,EAElC,EAAKpC,MAAM0C,eAAeG,SAASL,IACrC3B,EAAyBjB,KAAKgH,SAK7B/F,EAGT,SAASI,EAAeX,GAAQ,MAERmB,KAAKzB,MAAnBC,EAFsB,EAEtBA,OAAQqD,EAFc,EAEdA,EACRpD,EAAauB,KAAK9E,MAAlBuD,SACAQ,EAAgBJ,EAAhBI,GAAIH,EAAYD,EAAZC,QAEZ,GAAyB,SAArBA,EAAQC,SACV,GAAIN,EACFD,EAAOQ,QAAQ,CAAEC,GAAIR,IACrBuB,KAAKb,UAAS,SAAAjE,GAAK,MAAK,CACtBuD,SAAU,KACVC,cAAe,EACVxD,EAAMwD,cAAcQ,QAAO,SAAAL,GAAM,OAAIA,EAAOI,KAAOA,cAGrD,CACL,IADK,EAEYmG,SACdC,cADc,eAEdC,wBAFKC,EAFH,EAEGA,EAAGC,EAFN,EAEMA,EAGLC,EAAcjH,EAAOkH,OAAO,CAChCC,QAAS3K,EACT4K,gBAAiB,CACfL,EAAGA,EAPS,IAOM,EAClBC,EAAGA,EARS,IAQM,KAGtBxF,KAAKb,UAAS,SAAAjE,GAAK,MAAK,CACtBuD,SAAUgH,EACV/G,cAAe,GAAF,SAAMxD,EAAMwD,eAAZ,CAA2BG,QAKrB,yBAArBC,EAAQC,UACVvD,IAAgBC,WAAW,4BAA6B,CACtDoK,MAAOhE,EAAE,iC,EAtWTvD,E,YAGe,CACjBwH,oBAAqBC,IAAUC,KAAKC,WACpCC,qBAAsBH,IAAUC,KAAKC,WACrCnD,sBAAuBiD,IAAUI,OAAOF,WACxChD,uBAAwB8C,IAAUI,OAAOF,WACzCzD,sBAAuBuD,IAAUK,KAAKH,WACtChF,eAAgB8E,IAAUM,QAAQN,IAAUI,QAAQF,WACpD3E,QAASyE,IAAUO,MACnBzE,EAAGkE,IAAUK,KAAKH,WAElBzH,OAAQuH,IAAUQ,IAClBC,MAAOT,IAAUQ,M,EAdfjI,E,eAiBkB,CACpBgD,QAAS,KAyVEmF,kBAAgB,CAAC,SAAU,wBAA3BA,CACbC,YAAUC,YAAWC,YAAetI,MC1XLzD,IAAKgM,MAA9BC,qB,IAEAC,EAAkClM,IAAKC,MAAMC,QAA7CgM,8BAkEOC,EALe/L,aAxDN,SAACC,EAAOiB,GAI9B,IAAM8K,EAA0B/L,EAAMgM,QAAQC,SACxCC,EAAyB/K,IAAUF,EAASmF,SAiBlD,OAfA8F,EAAuBhH,SAAQ,SAAAiH,GAC7BA,EAAMC,WAAWlH,SAAQ,SAAApE,GAAQ,IACvBuL,EAA0BvL,EAA1BuL,sBACFC,EAAU,iBAAH,OAAoBD,GAC3BE,EAAoBR,EAAwBO,GAE9CE,EAAuB,EACvBD,IACFC,EAAuBD,EAAkBE,iBAG3C3L,EAAK0L,qBAAuBA,QAIzB,CACLpG,QAAS8F,MAIc,SAACvL,EAAUM,GACpC,MAAO,CACLyL,iBAAkB,SAAAL,GAChB,IAAIM,ECtCK,SACbC,EACAP,GAEA,OAAK9G,MAAMsH,QAAQD,IAEIA,EAAcE,QAAO,SAACC,EAAK1N,GAChD,IAAI2N,EAAoB,GAIxB,OAHI3N,GAAWkG,MAAMsH,QAAQxN,EAAQ4N,eACnCD,EAAoB3N,EAAQ4N,aAEvBF,EAAIG,OAAOF,KACjB,IAK+BtJ,MAHT,SAAAyJ,GAAE,OACzBA,EAAGd,wBAA0BA,MAXW,KDkCrBe,CACfnM,EAAS2L,cACTP,GAGF,GAAIM,EAAWU,UAAW,KAChBC,EAAaX,EAAbW,SAIR,KAFAX,EAAaA,EAAWY,oBAAoBtM,EAAS2L,gBAGnD,MAAM,IAAIY,MAAJ,gCACqBF,EADrB,0BAKR,IAAKX,EACH,MAAM,IAAIa,MAAM,2BAIpB7M,EAASkL,EAA8Bc,QAKf5M,CAG5B0N,K,+hBElEF,IAAMC,EAAe,SAAUrK,GAAO,IAC5BsK,EAA8DtK,EAA9DsK,SAAUC,EAAoDvK,EAApDuK,OAAQ/M,EAA4CwC,EAA5CxC,cAA0BgN,EAAkBxK,EAA7BoE,UADL,IAEKqG,YAAQ,CAC/CC,OAAQ,YACRC,KAAM,SAACC,EAAaC,GAClB,IAAMC,EAAUD,EAAQC,UAClBC,EAASF,EAAQE,SAEvB,GAAID,GAAWC,GAAUR,EAAQ,KACvBS,EAA4CJ,EAA5CI,iBAAkBhC,EAA0B4B,EAA1B5B,sBAE1BuB,EAAO,CAAE/M,gBAAewN,mBAAkBhC,4BAK9CiC,QAAS,SAAAJ,GAAO,MAAK,CACnBK,YAAaL,EAAQC,UACrBK,QAASN,EAAQE,aAlBe,UAE3BI,EAF2B,EAE3BA,QAASD,EAFkB,EAElBA,YAAeP,EAFG,KAsBpC,OACE,yBACEvG,UAAWgH,IACT,uBACA,CAAED,QAASA,GACX,CAAED,YAAaA,GACfV,GAEF3O,IAAK8O,EACLU,UAAA,6BAA+B7N,IAE9B8M,IAKPD,EAAaiB,UAAY,CACvBhB,SAAU9C,IAAU+D,KAAK7D,WACzBlK,cAAegK,IAAUgE,OAAO9D,WAChC6C,OAAQ/C,IAAUK,KAAKH,WACvBtD,UAAWoD,IAAUI,QAGRyC,Q,yBCvCPoB,GAAmCnD,IAAnCmD,+BAEFC,GAAe,SAAS1L,GAAO,IAEjCjD,EAWEiD,EAXFjD,oBACA4O,EAUE3L,EAVF2L,iBACeC,EASb5L,EATF6L,cACA7M,EAQEgB,EARFhB,OACAG,EAOEa,EAPFb,QACAE,EAMEW,EANFX,WACAyM,EAKE9L,EALF8L,gBACA/I,EAIE/C,EAJF+C,QACAgJ,EAGE/L,EAHF+L,aACAzB,EAEEtK,EAFFsK,SACA0B,EACEhM,EADFgM,cAGIC,EAAU,IAAM9M,EAChB+M,EAAU,IAAM7M,EAGtB,IAAK0M,IAAiBA,EAAa3N,OACjC,OAAO,KAGT,IAAM+N,EAAWC,cAEjBrQ,qBAAU,WACJiQ,GACFD,EAAalK,SAAQ,SAAAyH,GACFmC,GAA+BnC,EAAYvG,GAEnDlB,SAAQ,SAAAwK,GACfA,EAAQC,OAAM,SAAAC,GACZJ,EAASK,KAAK,CACZlF,MAAO,qCACPmF,QAASF,EAAME,QACfpG,KAAM,QACNqG,WAAW,eAMpB,CAAC3J,EAASgJ,EAAcC,EAAeG,IAE1C,IAqDMQ,EAAgBC,IAAMC,SArDH,kBACvB7N,EAAOpC,UAAUmI,KAAI,SAAC/F,EAAQxB,GAC5B,IAAM8L,EAAayC,EAAavO,GAEhC,IAAK8L,EACH,OAAO,KAGT,IAAM7L,EAAO,CACX6L,aACAvG,WAeI+J,GACH9N,EAAOU,QAAU4J,GAAcA,EAAW5J,OACvC4J,EAAW5J,OACXV,EAAOU,OAEPqN,EAwFZ,SACEhB,EACAvO,EACA8M,EACAqB,EACAmB,EACAlB,GAEA,GAAIG,EAAazC,WAAY,CAE3B,IAAMyD,EAAoBpB,EAD1BmB,EAAaA,GAAclB,GAG3B,IAAKmB,EACH,MAAM,IAAI5C,MAAJ,mDACwC2C,EADxC,0CAEkBE,KAAKC,UAAUtB,KAIzC,OACE,kBAACoB,EAAD,CACEhB,aAAcA,EACdvO,cAAeA,EACf8M,SAAU,CAACA,KAKjB,OAAO,kBAAC,KAAD,MApHuB4C,CACxBzP,EACAD,EACA8M,EACAqB,EACAmB,EACAlB,GAGF,OACE,kBAAC,EAAD,CACErB,OAAQuB,EACRtO,cAAeA,EACf4G,UAAWgH,IAAW,qBAAsB,CAC1C+B,OAAQpQ,IAAwBS,IAElC4H,IAAK5H,GAEJuP,QAK6C,CACpD/N,EACA+M,EACAhJ,EACAuH,EACAqB,EACAC,EACAE,EACA/O,IAGF,OACE,yBACEsO,UAAQ,eACRhH,MAAO,CACL+I,QAAS,OACTC,iBAAkB,UAAF,OAAYlO,EAAZ,aAAwB8M,EAAxB,MAChBqB,oBAAqB,UAAF,OAAYjO,EAAZ,aAA2B6M,EAA3B,MACnBqB,OAAQ,OACRC,MAAO,SAGRb,IAKPjB,GAAaJ,UAAY,CACvBS,aAAcvE,IAAUO,MAAML,WAC9B+F,aAAcjG,IAAUC,KAAKC,WAC7B3K,oBAAqByK,IAAUgE,OAAO9D,WACtC1I,OAAQwI,IAAUkG,OAAOhG,WACzBiE,iBAAkBnE,IAAUkG,OAAOhG,WACnCoE,gBAAiBtE,IAAUK,KAAKH,WAChC3E,QAASyE,IAAUO,MACnBuC,SAAU9C,IAAU+D,KACpBM,cAAerE,IAAUI,OACzBzI,QAASqI,IAAUgE,OAAO9D,WAC1BrI,WAAYmI,IAAUgE,OAAO9D,YAG/BgE,GAAaiC,aAAe,CAC1B5B,aAAc,GACd5M,QAAS,EACTE,WAAY,EACZL,OAAQ,CACNpC,UAAW,CAAC,KAEdG,oBAAqB,EACrB0Q,cAAc,EACd9B,iBAAkB,CAChBiC,gBC3JW,SAAyB5N,GACtC,OAAO,+BAAMgN,KAAKC,UAAUjN,MD4J5B6L,cAAe,yBA2CFH,U,qBEzMTmC,GAA8BC,MAAQ,SAAAC,GAC1C,IAAMC,EAA2B,GAKjC,OAJAD,EAAgBlM,SAAQ,SAAAoM,GACtBD,EAAyBC,EAAiBC,aACxCD,EAAiBjM,UAEdgM,KAgCMG,GALezR,aAxBN,SAAAC,GACtB,IAIIkP,EAJEkC,EAAkB1M,IAAiBC,QAAQC,IAAa6M,UACxDJ,EAA2BH,GAA4BE,GAIzDA,EAAgB3P,SAClByN,EAAgBkC,EAAgB,GAAGG,aAPN,MAU8BvR,EAAMC,UAEnE,MAAO,CACLuC,QAb6B,EAUvBA,QAINE,WAd6B,EAUdA,WAKfL,OAf6B,EAUFA,OAM3BjC,oBAhB6B,EAUMA,oBAQnC4O,iBAAkBqC,EAElBnC,mBAMF,KAF4BnP,CAG5BgP,I,y3BCjCF,IAAI2C,GAASP,KAAQQ,MAEfC,G,YAUJ,WAAYvO,GAAO,M,IAAA,O,4FAAA,S,EACjB,K,EAAA,gBAAMA,GAAN,G,kDADiB,mCA6DM,WAEvB,IAAMwO,EAAqB,GAFE,EAGY,EAAKxO,MAAtChB,EAHqB,EAGrBA,OAAQlC,EAHa,EAGbA,qBACR8M,EAAgB,EAAKjN,MAArBiN,YAER,GAAKA,GAAgBA,EAAYxL,OAAjC,CAIA,IAAK,IAAIoB,EAAI,EAAGA,EAAIR,EAAOpC,UAAUwB,OAAQoB,IAAK,CAChD,IAAMiP,EAAe3R,EAAqB0C,GAM1C,GAJEiP,GACAA,EAAazD,kBACbyD,EAAazF,sBAGbwF,EAAmB5O,KAAK,CACtBoL,iBAAkByD,EAAazD,iBAC/BhC,sBAAuByF,EAAazF,4BAHxC,CASA,IAAM0F,EACJ9E,EAAYvJ,MACV,SAAAyJ,GAAE,OACC0E,EAAmB7L,MAClB,SAAAgM,GAAC,OAAIA,EAAE3F,wBAA0Bc,EAAGd,6BAErCY,EAAYA,EAAYxL,OAAS,GAExCoQ,EAAmB5O,KAAK8O,IAG1BF,EAAmB3M,SAAQ,SAAC+M,EAAIpP,GAC1BoP,GAAMA,EAAG5D,kBACX,EAAKc,gBAAgB,CACnBtO,cAAegC,EACfwL,iBAAkB4D,EAAG5D,iBACrBhC,sBAAuB4F,EAAG5F,+BAvGf,4BA6GD,YAIZ,IAHJxL,EAGI,EAHJA,cACAwN,EAEI,EAFJA,iBACAhC,EACI,EADJA,sBAEIM,EAAa,EAAKuF,eACpB,EAAK7O,MAAM+C,QACXiI,EACAhC,GAGF,GAAIM,EAAWU,UAAW,KAChBC,EAAaX,EAAbW,SAGR,KAFAX,EAAaA,EAAWY,oBAAoB,EAAKlK,MAAM+C,UAGrD,MAAM,IAAIoH,MAAJ,gCACqBF,EADrB,0BAMV,EAAKjK,MAAM3D,wBAAwBmB,EAAe8L,MAhIlD,EAAK3M,MAAQ,CACXiN,YAAa,IAJE,E,uSAQJ7G,GACb,IAAM6G,EAAc,GAUpB,OATA7G,EAAQlB,SAAQ,SAAAiH,GACdA,EAAMc,YAAY/H,SAAQ,SAAAiN,GACnBA,EAAKpP,SACRoP,EAAKpP,OAAS,eAEhBkK,EAAYhK,KAAKkP,SAIdlF,I,qCAGM7G,EAASiI,EAAkBhC,GACxC,IAAMF,EAAQ/F,EAAQ1C,MAAK,SAAAyI,GACzB,OAAOA,EAAMkC,mBAAqBA,KAGpC,GAAKlC,EAIL,OAAOA,EAAMc,YAAYvJ,MAAK,SAAAiJ,GAC5B,OAAOA,EAAWN,wBAA0BA,O,0CAS9C,GAAIvH,KAAKzB,MAAM+C,QAAS,CACtB,IAAM6G,EAAcnI,KAAKsN,eAAetN,KAAKzB,MAAM+C,SACnDtB,KAAKb,SAAS,CAAEgJ,eAAenI,KAAKuN,2B,yCAIrBzL,GACjB,IAAM0L,EAAqB1L,EAAUvE,OAAOpC,UAAUwB,OAChD8Q,EAAiBzN,KAAKzB,MAAMhB,OAAOpC,UAAUwB,OAC7C+Q,EAAQ1N,KAAKzB,MAAMhB,OAAOpC,UAAU+F,MAAK,SAAAiM,GAAE,QAAMA,EAAGjP,OAE1D,GACE8B,KAAKzB,MAAM+C,UAAYQ,EAAUR,SAChCmM,IAAmBD,IAAuBE,EAC3C,CACA,IAAMvF,EAAcnI,KAAKsN,eAAetN,KAAKzB,MAAM+C,SACnDtB,KAAKb,SAAS,CAAEgJ,eAAenI,KAAKuN,2B,+BA6E/B,IACClS,EAAyB2E,KAAKzB,MAA9BlD,qBACFiP,EAAesC,GAAOvR,GAE5B,OACE,yBAAKsH,UAAU,cACZ3C,KAAK9E,MAAMiN,YAAYxL,QACtB,kBAAC,GAAD,CACE4N,cAAevK,KAAKzB,MAAMgM,cAC1BjJ,QAAStB,KAAKzB,MAAM+C,QACpBgJ,aAAcA,EACdD,gBAAiBrK,KAAKqK,qB,6CAST,WAEbhP,EAAyB2E,KAAKzB,MAA9BlD,qBACRoJ,OAAOkJ,KAAKtS,GAAsB+E,SAAQ,SAAArE,GACxC,EAAKwC,MAAMqP,0BAA0B7R,W,gCAxKlBmH,a,GAAnB4J,G,YACe,CACjBxR,oBAAqByK,IAAUgE,OAAO9D,WACtC3E,QAASyE,IAAUO,MACnBjL,qBAAsB0K,IAAUkG,OAAOhG,WACvC1I,OAAQwI,IAAUkG,OAAOhG,WACzBrL,wBAAyBmL,IAAUK,KAAKH,WACxC2H,0BAA2B7H,IAAUK,KAAKH,aAyL/B6G,U,GCpMXjS,IAAKC,MAAMC,QAFbH,G,GAAAA,wBACAgT,G,GAAAA,0BA8BaC,GALa5S,aAtBJ,SAAAC,GAAS,MAC+BA,EAAMC,UAEpE,MAAO,CACLG,oBAJ6B,EACvBA,oBAINiC,OAL6B,EACFA,OAK3BlC,qBAN6B,EACMA,qBAMnCF,UAAWD,EAAMC,cAIM,SAAAU,GACzB,MAAO,CACLjB,wBAAyB,SAACmB,EAAeC,GACvCH,EAASjB,GAAwBmB,EAAeC,KAElD4R,0BAA2B,WACzB/R,EAAS+R,UAKa3S,CAG1B6R,I,o0BC5BIgB,G,2cASF,IAAMC,EACgB,UAApB/N,KAAKzB,MAAMmC,KAAmB,aAAe,YAEzCsN,EAAShO,KAAKzB,MAAMwN,MACtB,CACEkC,SAAUjO,KAAKzB,MAAMwN,MACrBmC,YAAalO,KAAKzB,MAAM4P,OACpB,KACqC,EAArCC,OAAOC,SAASrO,KAAKzB,MAAMwN,QAEjC,GAEJ,OACE,6BACEnJ,MAAOoL,EACPrL,UAAWgH,IAAW,YAAaoE,EAAe,CAChD,UAAW/N,KAAKzB,MAAM4P,UAGvBnO,KAAKzB,MAAMsK,e,gCA5BI3F,a,GAAlB4K,G,kBACe,CACjBpN,KAAMqF,IAAUI,OAAOF,WACvBkI,OAAQpI,IAAUC,KAAKC,WACvB4C,SAAU9C,IAAU+D,KACpBiC,MAAOhG,IAAUI,Q,qGA6BN2H,U,kgBChCPQ,GAAmBC,IAAgBC,SAAnCF,eAEFG,GAAsB,SAAC,GAA0B,IAAxB1N,EAAwB,EAAxBA,QAAS8H,EAAe,EAAfA,SA6CtC,OACE,kBAAC,IAAD,CACE6F,kBAXsB,kBACxB,yBAAK/L,UAAU,gBAAgBgM,KAAK,SAClC,8CACmB5N,EADnB,KAC6B,6BAD7B,kDAUAA,QAASA,EACT6N,QAhDkB,SAAC9D,EAAO+D,GA6B5BP,GAAevD,KAAK,CAClBpF,QA7BkB,WAAM,SACAmJ,oBAAS,GADT,GACjBC,EADiB,KACXC,EADW,KAGxB,OACE,yBAAKrM,UAAU,gBAAgBgM,KAAK,SAClC,yBAAKhM,UAAU,uBACb,wBAAIA,UAAU,4BACX5B,EADH,KACa,8BAAO+J,EAAME,WAG5B,4BACErI,UAAU,mDACVsB,QAAS,kBAAM+K,GAAQ,SAAAC,GAAC,OAAKA,OAE7B,kBAAC,IAAD,CACEC,KAAK,eACLvM,UAAWwM,IAAW,0BAA2B,CAC/CC,OAAQL,MAPd,eAaCA,GAAQ,6BAAMF,KAOnBhJ,MAAO,2BAAF,OAA6B9E,OAmBjC8H,IAKP4F,GAAoB5E,UAAY,CAC9B9I,QAASgF,IAAUI,OAAOF,WAC1B4C,SAAU9C,IAAU+D,KAAK7D,YAGZwI,ICrEAA,GDqEAA,G,04BEhDTY,G,YAuCJ,WAAY9Q,GAAO,M,iGAAA,S,EACjB,K,EAAA,gBAAMA,GAAN,G,kDADiB,iBAyBX,CACNuH,qBAAqB,EACrBI,sBAAsB,EACtBjD,uBAAwB,GACxBH,sBAAuB,UACvBwE,WAAY,KA9BK,+BAuCE,SAAApI,GACnBrE,IAAKyU,IAAIC,KAAK,sBAGd,IAAIC,GAAe,IAAIC,MAAOC,cAC1BC,GAAa,IAAIF,MAAOC,cAe5B,OAdI,EAAKnR,MAAM+C,UACbqO,EAAa,IAAIF,KAAK,cAAcC,cACpC,EAAKnR,MAAM+C,QAAQlB,SAAQ,SAAAiH,GACzB,IAAMuI,EAAYC,IAAOxI,EAAMuI,UAAW,YAAYF,cAClDE,EAAYJ,IACdA,EAAeI,GAEbA,EAAYD,IACdA,EAAaC,OAMZE,QAAQC,QAAQ,CACrB,CACEC,cAAe,WACfC,YAAa,cACbC,kBAAmB,EAAK3R,MAAM2R,kBAC9BC,UAAWjR,EAAOiR,UAClBX,eACAG,aACAS,UAAU,QAnEG,4BAwED,SAAAC,GAEhB,OADAxV,IAAKyU,IAAIC,KAAK,mBACPO,QAAQC,aA1EE,4BA6ED,SAACM,EAAeC,GAEhC,OADAzV,IAAKyU,IAAIC,KAAK,mBACPO,QAAQC,aA/EE,4BAkFD,SAAAE,GAEhB,OADApV,IAAKyU,IAAIC,KAAK,mBACPO,QAAQC,aApFE,8BAuFC,SAACQ,EAAchH,GAEjC,OADA1O,IAAKyU,IAAIC,KAAK,qBACPO,QAAQC,aAzFE,gCA4FG,SAAAS,GAChB,EAAKjS,MAAMkS,qBACb,EAAKlS,MAAMkS,oBAAoBD,MA9FhB,kCAkGK,SAAAE,GAClB,EAAKnS,MAAMoS,uBACb,EAAKpS,MAAMoS,sBAAsBD,MApGlB,IAGTE,EAAiB,EAAKrS,MAAtBqS,aACFC,EAASpM,OAAOC,OAAO,GAAIkM,GAJhB,OAMjB/V,IAAK6V,aAAaI,eAAeC,iBAAiB,CAChDC,aAAc,CACZC,SAAUC,IAAQC,qBAClBC,MAAOF,IAAQG,mBAEjBR,WAGFhW,IAAK6V,aAAaY,aAAaP,iBAAiB,CAC9CC,aAAc,CACZC,SAAU,EAAKM,mBACfH,MAAO,EAAKI,gBACZC,OAAQ,EAAKC,gBACbC,OAAQ,EAAKC,gBACbC,aAAc,EAAKC,qBApBN,E,+SAkCb9R,KAAKzB,MAAMC,QACbwB,KAAKzB,MAAMC,OAAOuT,e,0CAqEF,MACiB/R,KAAKzB,MAAhC+C,EADU,EACVA,QAASiJ,EADC,EACDA,cADC,EAEuB1P,IAAK6V,aAAtCY,EAFU,EAEVA,aAAcR,EAFJ,EAEIA,eAGhBkB,EAAe,IAAIV,EAFE,cAE+B,CACxDb,oBAAqBzQ,KAAKyQ,sBAGtBwB,EAAiB,IAAInB,EAAekB,EAAc,CACtDrB,sBAAuB3Q,KAAK2Q,wBAO9B,GAJA3Q,KAAKkS,mBAVsB,cAW3BlS,KAAKgS,aAAeA,EACpBhS,KAAKiS,eAAiBA,EAElB3Q,EAAS,CACX,IAAM6O,EAAY7O,EAAQ,IAAMA,EAAQ,GAAG6O,UAE3C6B,EAAaT,mBAAmB,CAAEpB,cAC9B5F,GACFvK,KAAKiS,eAAed,qBAAqBhB,EAAW,CAnB7B,gBAwBzBnQ,KAAKb,SAAS,CACZmI,WAAY6K,GAAwB7Q,Q,yCAKvBQ,GAAW,MACO9B,KAAKzB,MAAhC+C,EADoB,EACpBA,QAASiJ,EADW,EACXA,cAOjB,GALIjJ,IAAYQ,EAAUR,SACxBtB,KAAKb,SAAS,CACZmI,WAAY6K,GAAwB7Q,KAGpCiJ,GAAiBA,IAAkBzI,EAAUyI,cAAe,CAC9D,IAAM4F,EAAY7O,EAAQ,IAAMA,EAAQ,GAAG6O,UACnC+B,EAAuBlS,KAAvBkS,mBAERlS,KAAKgS,aAAaT,mBAAmB,CAAEpB,cACvCnQ,KAAKiS,eAAed,qBAAqBhB,EAAW,CAAC+B,O,+BAIhD,IACHE,EAAkBC,EADf,OAcP,OAZwBzS,IAAiBC,QAAQC,IAAaC,OAE9CK,SAAQ,SAAAkS,GACtBA,EAAS/R,OAAOgS,WAAWnS,SAAQ,SAAAoS,GAC7BA,EAAKvT,KAAO,EAAK/D,MAAM+H,uBACzBoP,EAAoBG,EAAKC,UAChBD,EAAKvT,KAAO,EAAK/D,MAAM4H,wBAChCsP,EAAmBI,EAAKC,iBAM5B,oCAEE,kBAACC,GAAA,EAAqBC,SAAtB,MACG,SAAAC,GAAa,OACZ,kBAACC,GAAA,EAAmBF,SAApB,MACG,SAAAG,GAAW,OACV,kBAACC,EAAA,EAAWJ,SAAZ,MACG,SAAAK,GAAU,OACT,kBAACC,EAAA,EAAD,CACEC,SACEF,EAAWG,UAAUC,cACjB,kBACAC,EAENC,SACEN,EAAWG,UAAUC,cAAgB,SAAMC,EAE7CP,YAAaA,GAEZF,GACCA,EAAcW,uBACdX,EAAcW,sBAAsBpI,eAUpD,kBAAC,GAAD,CAAqBpK,QAAQ,cAC3B,kBAAC,EAAD,CACE+E,oBAAqB9F,KAAK9E,MAAM4K,oBAChCI,qBAAsBlG,KAAK9E,MAAMgL,qBACjCpD,sBACE9C,KAAK9E,MAAM4K,oBACP9F,KAAK9E,MAAM4H,sBACX,GAENG,uBACEjD,KAAK9E,MAAMgL,qBACPlG,KAAK9E,MAAM+H,uBACX,GAENT,sBAAuB,SAACD,EAAMiR,GAC5B,IAAMC,EAAclR,GAAQA,EAAK,GAAGmR,cAAgBnR,EAAKoR,MAAM,GACzDC,EAAU,KAAH,OAAQH,EAAR,iBACPI,EAAc,WAAH,OAAcJ,EAAd,aACXK,EAAerP,OAAOC,OAAO,GAAI,EAAKxJ,OAEtCiT,EAAS2F,EAAaF,GACtBG,EAAoBD,EAAaD,GAEjCG,EACJD,IAAsBP,GAAmC,OAAlBA,EAEzCM,EAAaD,GAAeL,GAAiBO,IAEd5F,GAAU6F,KAEvCF,EAAaF,IAAYE,EAAaF,IAGxC,EAAKzU,SAAS2U,IAEhBxS,QAAStB,KAAKzB,MAAM+C,WAQxB,yBAAKqB,UAAU,iBAEb,kBAAC,GAAD,CAAqB5B,QAAQ,iBAC3B,kBAAC,GAAD,CAAWL,KAAK,OAAOyN,OAAQnO,KAAK9E,MAAM4K,qBACvCsM,EACC,kBAACA,EAAD,CACEjX,UAAW6E,KAAKzB,MAAMpD,UACtBmG,QAAStB,KAAKzB,MAAM+C,QACpB2S,YAAajU,KAAKzB,MAAMjD,sBAG1B,kBAAC,EAAD,CACEgG,QAAStB,KAAK9E,MAAMoM,WACpBQ,cAAe9H,KAAKzB,MAAM+C,YAOlC,yBAAKqB,UAAWgH,IAAW,iBACzB,kBAAC,GAAD,CAAqB5I,QAAQ,cAC3B,kBAAC,GAAD,CACEO,QAAStB,KAAKzB,MAAM+C,QACpBiJ,cAAevK,KAAKzB,MAAMgM,kBAMhC,kBAAC,GAAD,CAAqBxJ,QAAQ,kBAC3B,kBAAC,GAAD,CAAWL,KAAK,QAAQyN,OAAQnO,KAAK9E,MAAMgL,sBACxCmM,GACC,kBAACA,EAAD,CACElE,OAAQnO,KAAK9E,MAAMgL,qBACnB/K,UAAW6E,KAAKzB,MAAMpD,UACtBmG,QAAStB,KAAKzB,MAAM+C,QACpB2S,YAAajU,KAAKzB,MAAMjD,+B,gCA/TrB4H,a,GAAfmM,G,YACe,CACjB/N,QAASyE,IAAUM,QACjBN,IAAUmO,MAAM,CACd3K,iBAAkBxD,IAAUI,OAAOF,WACnC2J,UAAW7J,IAAUI,OACrBgK,UAAWpK,IAAUI,OACrBgC,YAAapC,IAAUM,QACrBN,IAAUmO,MAAM,CACd3M,sBAAuBxB,IAAUI,OAAOF,WACxCkO,kBAAmBpO,IAAUI,OAC7BiO,aAAcrO,IAAUgE,OACxBsK,eAAgBtO,IAAUgE,OAC1BuK,eAAgBvO,IAAUgE,OAC1BvB,SAAUzC,IAAUI,OAAOF,WAC3BsO,OAAQxO,IAAUM,QAChBN,IAAUmO,MAAM,CACdM,WAAYzO,IAAUK,KAAKH,oBAOvCiK,kBAAmBnK,IAAUO,MAC7BsK,aAAc7K,IAAUmO,MAAM,CAC5BtP,KAAMmB,IAAUI,OAChBsO,SAAU1O,IAAUI,SAEtBsK,oBAAqB1K,IAAUK,KAC/BuK,sBAAuB5K,IAAUK,KAEjCjL,UAAW4K,IAAUkG,OAAOhG,WAE5B3K,oBAAqByK,IAAUgE,OAAO9D,WACtCsE,cAAexE,IAAUC,KACzBxH,OAAQuH,IAAUkG,SAsSPtF,mBAAW0I,IAYpB8C,GAA0B,SAAS7Q,GACvC,OAAOA,EAAQgC,KAAI,SAAA+D,GAuCjB,MAAO,CACLkC,iBAvC2BlC,EAArBkC,iBAwCNjC,WAtCiBD,EAAMc,YAAY7E,KAAI,SAAAuE,GAAc,IASjD6M,EACAC,EARFpN,EAKEM,EALFN,sBACA4M,EAIEtM,EAJFsM,kBACAE,EAGExM,EAHFwM,eACAC,EAEEzM,EAFFyM,eACAF,EACEvM,EADFuM,aAMF,GAAIvM,EAAWW,UAAoC,QAAxBX,EAAWW,SAIpCmM,EAAe,WACV,GAAI9M,EAAW0M,QAAU1M,EAAW0M,OAAO5X,OAAQ,CACxD,IAAMiY,EAAaC,KAAKC,MAAMjN,EAAW0M,OAAO5X,OAAS,GAEzD+X,EAAU7M,EAAW0M,OAAOK,GAAYJ,kBAExCG,EAAe9M,EAAWW,SAAWX,EAAWW,SAAW,KAG7D,MAAO,CACLkM,UACAC,eACApN,wBACA4M,oBACAE,iBACAC,iBACAF,wB,GC7YmCvZ,IAAKC,MAAMC,QAA9Cga,G,GAAAA,cAAeC,G,GAAAA,gBAEjBC,GAAkB,SAAAC,GAEtB,OAAOA,EAAQA,QAAQtW,MADN,SAAAuW,GAAC,OAAiB,IAAbA,EAAEzJ,WAwBpB0J,GAAkBna,aApBA,SAAAC,GAAS,IACvBC,EAAuBD,EAAvBC,UAAW+Z,EAAYha,EAAZga,QACnB,MAAO,CACL/Z,UAAWA,EAAUE,qBACrBC,oBAAqBH,EAAUG,oBAC/BsV,aAAcqE,GAAgBC,OAIP,SAAArZ,GACzB,MAAO,CACL4U,oBAAqB,SAAAD,GACnB3U,EAASkZ,GAAcvE,KAEzBG,sBAAuB,SAAAD,GACrB7U,EAASmZ,GAAgBtE,QAKPzV,CAGtBoU,IAEa+F,Q,k9CCxBPC,EAA0CC,IAA1CD,kBAAmBE,EAAuBD,IAAvBC,mBACnBC,EAAwDlU,IAAxDkU,wBAAyBC,EAA+BnU,IAA/BmU,2BACzB3O,EAAyCD,IAAzCC,qBAAsB4O,EAAmB7O,IAAnB6O,eA+BxBC,EAAe,SAACtO,EAAOS,EAAe8N,EAASC,GACnD,IAAIC,GAAW,EAMf,OAJKD,IACHC,EAAWC,EAAwB1O,EAAOS,EAAe8N,IAGpDE,GAGHC,EAA0B,SAAC1O,EAAOS,EAAe8N,GACrD,IAxCuBI,EAAMpJ,EAAQqJ,EACjCC,EACAC,EACAC,EAEEC,EAmCFP,GAAW,EAIf,GAH0BrR,OAAOkJ,KAAKiI,GAASjZ,OACE,EAEvB,KAChB2Z,EAAsBV,EAAtBU,kBAKFC,GAlDeP,EAmDnBlO,EAAcwF,iBAnDWV,EAoDzB0J,EApDiCL,EA+Cb,SAACO,EAAgB3O,GACrC,OAAOA,EAAW4O,oBAAsBD,GA/CxCN,EAAW,EAAIF,GACfG,EAAW,GACXC,EAAgB,GAEdC,EAAczJ,EAAO8J,MAAM,MACrBtW,SAAQ,SAAAjG,GAClB,IAAMwc,EAAQT,EAASU,UAAUX,EAAaxW,UAAK4T,EAAWlZ,IAE9D,GAAIwc,GAAS,EAAG,KACPE,EADO,EACUX,EAASY,OAAOH,EAAO,GADjC,MAEdR,EAASC,GAAiBS,EAC1BT,QAIG,CACLN,SAAUM,IAAkBC,EAAY1Z,OACxCX,KAAM,GAAF,OAAMma,EAAN,EAAmBD,MAsCvB7O,EAAMc,YAAcoO,EAAiBva,KACrC8Z,EAAWS,EAAiBT,SAG9B,OAAOA,GAUHiB,EAAuB,SAAC1P,GAA0C,IAAnCuO,EAAmC,uDAAzB,GAAIC,EAAqB,uCAC9DS,EAAsBV,EAAtBU,kBACJU,GAAU,EAGd,IAAKV,EACH,OAAOU,EAET,IAAMC,EAAqBX,EAAkBI,MAAM,KAE/CQ,EAAwB,WAE1B,GADiBC,EAAexa,SAAWsa,EAAmBta,OAK9D,OAAOwa,EAAeC,OAAM,SAAAC,GAAI,OAC9BJ,EAAmB/V,MACjB,SAAAoW,GAAoB,OAAIA,IAAyBD,EAAKZ,yBAKxDc,EAAyB,WAE3B,IADA,IAAIC,GAAU,EACLb,EAAQ,EAAGA,EAAQM,EAAmBta,OAAQga,IAAS,CAC9D,IAAMW,EAAuBL,EAAmBN,GAC1Cc,EAAeN,EAAeR,GAEpC,IACGc,GACDA,EAAahB,oBAAsBa,EACnC,CACAE,GAAU,EACV,OAGJ,OAAOA,GArC6D,EAwC5BnQ,EAAlCnF,cAxC8D,MAwCrD,GAxCqD,IAwC5BmF,EAArBc,mBAxCiD,MAwCnC,GAxCmC,EAyChEgP,EAAiBtB,EAAmB3T,EAASiG,EAC7CuP,EAAiB7B,EACnBqB,EACAK,EAQJ,OAHEP,IAHGG,GAGOO,KAKRC,EAAmB,SAACC,EAAmB5M,GAAyB,IAAhBxM,EAAgB,uDAAP,GAC7D,IAAIoZ,EAAJ,CADoE,MAKvBpZ,EAArCuM,KAAM8M,OALsD,MAKpC,aALoC,EAMpEA,EAAgB,CACd7M,cAIE8M,EAAoB,SAAChQ,EAAe5F,GACxC,IAAM6V,EACJnY,IAAiBC,QAAjB,sBACIwH,EAAQS,EAAckQ,UACtBC,EAAiB,IAAI1C,EAAmBrT,EAAQmF,GAC/BS,EAAcoQ,eAAehW,EAAOuU,mBAEzD3O,EAAcqQ,aAAajW,EAAOuU,kBAAmBwB,GAErDnQ,EAAcsQ,UAAUH,GAG1BnQ,EAAcuQ,iCACZN,EACAE,GAGF5Q,EAAMc,YAAcL,EAAcwF,iBAClCjG,EAAMiR,mBAAqBxQ,EAAcyQ,mBAAmB,CAC1D/P,SAAUtG,EAAOsG,WAGnBgQ,EAA4BnR,EAAOS,IAG/B0Q,EAA8B,SAACnR,EAAOS,GAAkB,IACpDyB,EAAqBlC,EAArBkC,iBAEHzC,EAAqB2R,IAAIlP,IAC5BzC,EAAqB4R,IAAI5Q,IAIvB6Q,EAA0B,SAACtR,EAAOS,GACtC,IAAMiQ,EACJnY,IAAiBC,QAAjB,sBAEGwH,EAAMc,cACTd,EAAMc,YAAcL,EAAc8Q,kBAAkBb,IAGlD1Q,EAAMiR,oBACRxQ,EAAc+Q,uBAAuBxR,EAAMiR,qBAIzCQ,EAAiB,SAAAzR,GACrB,MAAO,CACLkC,iBAAkBlC,EAAMkC,iBACxBrH,OAAQmF,EAAMnF,OAAOoB,KAAI,SAAA+T,GAAI,MAAK,CAChCZ,kBAAmBY,EAAKZ,wBAK9B,SAASsC,EAAT,GAMG,IAYGC,EACAC,EAlBJpI,EAKC,EALDA,OACAX,EAIC,EAJDA,kBACA+G,EAGC,EAHDA,mBACArJ,EAEC,EAFDA,0BACAsL,EACC,EADDA,aACC,IAEyBpK,oBAAS,GAFlC,GAEMhE,EAFN,KAEaqO,EAFb,SAG6BrK,mBAAS,IAHtC,GAGMxN,EAHN,KAGe8X,EAHf,SAIyCtK,oBAAS,GAJlD,GAIMvE,EAJN,KAIqB8O,EAJrB,KAKKC,EAAkB3O,cALvB,EAM0B4O,qBAAWxG,KAA9BI,iBANP,MAMmB,GANnB,IAUGA,EAFFqG,iBAAkB3D,OARnB,SASC4D,EACEtG,EADFsG,8BAgDIC,EAAiB,SAACC,EAAa/D,GACnC,GAAInV,MAAMsH,QAAQ4R,IAAgBA,EAAYhd,OAAS,EAAG,CAExD,IAAM2E,EAAUqY,EAAYrW,KAAI,SAAA+D,GAC9B6R,EAAa7R,EAAMkC,iBAAkBuP,EAAezR,IACpD,IAAMS,EAAgB,IAAIuN,EACxBhO,EACAA,EAAMkC,kBAsBR,OAnBAoP,EAAwBtR,EAAOS,GAC/B0Q,EAA4BnR,EAAOS,GAGnCkR,EAAyB3R,EAAMkC,kBAAoBmM,EACjDkE,EAAoB9R,IAEnB+R,MAAK,SAAAC,GACAA,IAAWA,EAAOC,YAtDX,SAAC1S,EAAOS,EAAe8N,GAEzBD,EACftO,EACAS,EACA8N,EACAC,IAKAjI,EAA0B,GAG5B,IAAMoM,EAAsBjD,EAC1B1P,EACAuO,EACAC,GAGF8B,EACEqC,EACA,qGACAV,GAGFF,EAAW,GAAD,SAAK9X,GAAL,CAAc+F,KACxBgS,GAAiB,GA4BPY,CAAa5S,EAAOS,EAAe8N,MAGtC/K,OAAM,SAAAC,GACDA,IAAUA,EAAMiP,aAClBZ,GAAS,GACT7J,IAAIxE,MAAMA,OAITzD,KAGT+R,EAAW9X,KAMTsY,EAAmB,4CAAG,WAAM9R,GAAN,mGACDA,EAAckQ,UAA/BkC,EADkB,EAClBA,aADkB,wDAIpBC,EAJoB,4CAIH,sGAChBD,EAAaE,UADG,iEAEAF,EAAaG,OAFb,cAEfnY,EAFe,OAGrB4V,EAAkBhQ,EAAe5F,GATTkX,GAAW,SAAA9X,GAAO,SAAQA,MAM7B,kBAKd6Y,KALc,2CAJG,qDAYpBG,EACJb,GAAiC3R,EAAcyS,iBAC3CC,EAAW/Z,MAAM6Z,GACpBG,KAAK,MACLnX,IAAI6W,GAhBmB,SAkBbrK,QAAQ7H,IAAIuS,GAlBC,mFAAH,sDAqBnBE,EAAW,4CAAG,uGAClB,IACQ9E,EAAU,GAEVU,EAAoBW,GAAsBA,EAAmB,GAC7D0D,EAAiB,CAAC9J,EAAQX,GAE5BoG,IACFV,EAAQU,kBAAoBA,EAExBT,GACF8E,EAAexc,KAAKyX,KAKtBzC,EAAUyH,0BACVzH,EAAU0H,2BAEVF,EAAexc,MAAK,GAGtB8a,EAA0B/I,GAAqBwF,EAC7CF,EAAuB,WAAvB,EAA2BmF,IAE1Bd,MAAK,SAAAC,GACAA,IAAWA,EAAOC,YACpBL,EAAeI,EAAQlE,MAG1B/K,OAAM,SAAAC,GACDA,IAAUA,EAAMiP,aAClBZ,GAAS,GACT7J,IAAIxE,MAAMA,OAGhB,MAAOA,GACHA,IACFqO,GAAS,GACT7J,IAAIxE,MAAMA,IAvCI,2CAAH,qDA4CXgQ,EAA2BC,uBAAY,WAC3C,IAAK,IAAI7K,KAAqB+I,EACxB,WAAYA,EAA0B/I,IACxC+I,EAA0B/I,GAAmB8K,SAIjD,IAAK,IAAI9K,KAAqB8I,EACxB,WAAYA,EAAyB9I,KACvC8I,EAAyB9I,GAAmB8K,SAC5CvF,EAA2BvF,GAC3BpJ,EAAqB2K,OAAOvB,OAK5B+K,EAAwB/gB,YAAYgW,GAwB1C,OAtBA5V,qBAAU,aAEN2gB,GACAA,EAAsB7D,OAAM,SAAA8D,GAAC,OAAIhL,EAAkB9O,SAAS8Z,SAI5DpU,EAAqBqU,QACrBL,OAED,CAACG,EAAuBH,EAA0B5K,IAErD5V,qBAAU,WAKR,OAJA0e,EAA2B,GAC3BC,EAA4B,GAC5ByB,IAEO,WACLI,OAED,IAEChQ,EACK,uCAAaS,KAAKC,UAAUV,IAInC,kBAACsK,EAAA,EAAD,CACE9T,QAASA,EACTiJ,cAAeA,EACf2F,kBAAmBA,IAKzB6I,EAAwBlP,UAAY,CAClCqG,kBAAmBnK,IAAUO,MAAML,WACnCgR,mBAAoBlR,IAAUO,MAC9BuK,OAAQ9K,IAAUkG,OAClB2B,0BAA2B7H,IAAUK,KAAKH,WAC1CiT,aAAcnT,IAAUK,KAAKH,YAGhB8S,Q,QC7aqCle,EAAKC,MAAMC,QAAvD6S,E,EAAAA,0BAA2BsL,E,EAAAA,aAC7B3V,EAAW,SAAA4R,GAAC,OAAiB,IAAbA,EAAEzJ,QAoBlB0P,EAAmCngB,aAlBjB,SAACC,EAAOiB,GAC9B,IAAMyU,EAAe1V,EAAMga,QAAQA,QAAQtW,KAAK2E,GAEhD,MAAO,CACLsN,OAAQ1U,EAAS0U,QAAUD,MAGJ,SAAA/U,GACzB,MAAO,CACLqd,aAAc,SAAC3P,EAAkBvN,GAC/BH,EAASqd,EAAa3P,EAAkBvN,KAE1C4R,0BAA2B,WACzB/R,EAAS+R,SAK0B3S,CAGvC8d,GAEaqC,O","file":"ConnectedStandaloneRouting~IHEInvokeImageDisplay~ViewerRouting.bundle.7c9d1b886effe01ae8d3.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nexport default function usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n\r\n  return ref.current;\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { CineDialog } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport csTools from 'cornerstone-tools';\r\nimport { commandsManager } from './../App.js';\r\n// Our target output kills the `as` and \"import\" throws a keyword error\r\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nconst toolImport = csTools.import;\r\nconst scrollToIndex = toolImport('util/scrollToIndex');\r\nconst { setViewportSpecificData } = OHIF.redux.actions;\r\n\r\n// Why do I need or care about any of this info?\r\n// A dispatch action should be able to pull this at the time of an event?\r\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\r\nconst mapStateToProps = state => {\r\n  // Get activeViewport's `cine` and `stack`\r\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\r\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\r\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\r\n\r\n  const cineData = cine || {\r\n    isPlaying: false,\r\n    cineFrameRate: 24,\r\n  };\r\n\r\n  // New props we're creating?\r\n  return {\r\n    activeEnabledElement: dom,\r\n    activeViewportCineData: cineData,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\r\n  const {\r\n    activeEnabledElement,\r\n    activeViewportCineData,\r\n    activeViewportIndex,\r\n  } = propsFromState;\r\n\r\n  return {\r\n    cineFrameRate: activeViewportCineData.cineFrameRate,\r\n    isPlaying: activeViewportCineData.isPlaying,\r\n    onPlayPauseChanged: isPlaying => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.isPlaying = !cine.isPlaying;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onFrameRateChanged: frameRate => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.cineFrameRate = frameRate;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onClickNextButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\r\n      if (currentImageIdIndex >= imageIds.length - 1) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\r\n    },\r\n    onClickBackButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex } = stackData.data[0];\r\n      if (currentImageIdIndex === 0) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\r\n    },\r\n    onClickSkipToStart: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      scrollToIndex(activeEnabledElement, 0);\r\n    },\r\n    onClickSkipToEnd: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const lastIndex = stackData.data[0].imageIds.length - 1;\r\n      scrollToIndex(activeEnabledElement, lastIndex);\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedCineDialog = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(CineDialog);\r\n\r\nexport default ConnectedCineDialog;\r\n","import { LayoutButton } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\n\r\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentLayout: state.viewports.layout,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // TODO: Change if layout switched becomes more complex\r\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\r\n      const viewports = [];\r\n      const numRows = selectedCell.row + 1;\r\n      const numColumns = selectedCell.col + 1;\r\n      const numViewports = numRows * numColumns;\r\n\r\n      for (let i = 0; i < numViewports; i++) {\r\n        // Hacky way to allow users to exit MPR \"mode\"\r\n        const viewport = currentLayout.viewports[i];\r\n        let plugin = viewport && viewport.plugin;\r\n        if (viewport && viewport.vtk) {\r\n          plugin = 'cornerstone';\r\n        }\r\n\r\n        viewports.push({\r\n          plugin,\r\n        });\r\n      }\r\n      const layout = {\r\n        numRows,\r\n        numColumns,\r\n        viewports,\r\n      };\r\n\r\n      const maxActiveIndex = numViewports - 1;\r\n      if (activeViewportIndex > maxActiveIndex) {\r\n        dispatch(setViewportActive(0));\r\n      }\r\n\r\n      dispatch(setLayout(layout));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch) => {\r\n  const onChangeFromDispatch = propsFromDispatch.onChange;\r\n  const { currentLayout, activeViewportIndex } = propsFromState;\r\n\r\n  return {\r\n    onChange: selectedCell =>\r\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\r\n  };\r\n};\r\n\r\nconst ConnectedLayoutButton = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(LayoutButton);\r\n\r\nexport default ConnectedLayoutButton;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport {\r\n  ExpandableToolMenu,\r\n  RoundedButtonGroup,\r\n  ToolbarButton,\r\n  withModal,\r\n  withDialog,\r\n} from '@ohif/ui';\r\n\r\nimport './ToolbarRow.css';\r\nimport { commandsManager, extensionManager } from './../App.js';\r\n\r\nimport ConnectedCineDialog from './ConnectedCineDialog';\r\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\r\nimport { withAppContext } from '../context/AppContext';\r\n\r\nclass ToolbarRow extends Component {\r\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\r\n  // closed if selected is null/undefined\r\n  static propTypes = {\r\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\r\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\r\n    selectedLeftSidePanel: PropTypes.string.isRequired,\r\n    selectedRightSidePanel: PropTypes.string.isRequired,\r\n    handleSidePanelChange: PropTypes.func.isRequired,\r\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    studies: PropTypes.array,\r\n    t: PropTypes.func.isRequired,\r\n    // NOTE: withDialog, withModal HOCs\r\n    dialog: PropTypes.any,\r\n    modal: PropTypes.any,\r\n  };\r\n\r\n  static defaultProps = {\r\n    studies: [],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\r\n    // TODO:\r\n    // If it's a tool that can be active... Mark it as active?\r\n    // - Tools that are on/off?\r\n    // - Tools that can be bound to multiple buttons?\r\n\r\n    // Normal ToolbarButtons...\r\n    // Just how high do we need to hoist this state?\r\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\r\n    this.state = {\r\n      toolbarButtons: toolbarButtonDefinitions,\r\n      activeButtons: [],\r\n    };\r\n\r\n    this.seriesPerStudyCount = [];\r\n\r\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\r\n\r\n    this.updateButtonGroups();\r\n  }\r\n\r\n  updateButtonGroups() {\r\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    this.buttonGroups = {\r\n      left: [],\r\n      right: [],\r\n    };\r\n\r\n    // ~ FIND MENU OPTIONS\r\n    panelModules.forEach(panelExtension => {\r\n      const panelModule = panelExtension.module;\r\n      const defaultContexts = Array.from(panelModule.defaultContext);\r\n\r\n      panelModule.menuOptions.forEach(menuOption => {\r\n        const contexts = Array.from(menuOption.context || defaultContexts);\r\n        const hasActiveContext = this.props.activeContexts.some(actx =>\r\n          contexts.includes(actx)\r\n        );\r\n\r\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\r\n        // Note: This does not cleanly handle `studies` prop updating with panel open\r\n        const isDisabled =\r\n          typeof menuOption.isDisabled === 'function' &&\r\n          menuOption.isDisabled(this.props.studies);\r\n\r\n        if (hasActiveContext && !isDisabled) {\r\n          const menuOptionEntry = {\r\n            value: menuOption.target,\r\n            icon: menuOption.icon,\r\n            bottomLabel: menuOption.label,\r\n          };\r\n          const from = menuOption.from || 'right';\r\n\r\n          this.buttonGroups[from].push(menuOptionEntry);\r\n        }\r\n      });\r\n    });\r\n\r\n    // TODO: This should come from extensions, instead of being baked in\r\n    this.buttonGroups.left.unshift({\r\n      value: 'studies',\r\n      icon: 'th-large',\r\n      bottomLabel: this.props.t('Series'),\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const activeContextsChanged =\r\n      prevProps.activeContexts !== this.props.activeContexts;\r\n\r\n    const prevStudies = prevProps.studies;\r\n    const studies = this.props.studies;\r\n    const seriesPerStudyCount = this.seriesPerStudyCount;\r\n\r\n    let studiesUpdated = false;\r\n\r\n    if (prevStudies.length !== studies.length) {\r\n      studiesUpdated = true;\r\n    } else {\r\n      for (let i = 0; i < studies.length; i++) {\r\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\r\n          seriesPerStudyCount[i] = studies[i].series.length;\r\n\r\n          studiesUpdated = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (studiesUpdated) {\r\n      this.updateButtonGroups();\r\n    }\r\n\r\n    if (activeContextsChanged) {\r\n      this.setState(\r\n        {\r\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\r\n        },\r\n        this.closeCineDialogIfNotApplicable\r\n      );\r\n    }\r\n  }\r\n\r\n  closeCineDialogIfNotApplicable = () => {\r\n    const { dialog } = this.props;\r\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\r\n    if (dialogId) {\r\n      const cineButtonPresent = toolbarButtons.find(\r\n        button => button.options && button.options.behavior === 'CINE'\r\n      );\r\n      if (!cineButtonPresent) {\r\n        dialog.dismiss({ id: dialogId });\r\n        activeButtons = activeButtons.filter(\r\n          button => button.options && button.options.behavior !== 'CINE'\r\n        );\r\n        this.setState({ dialogId: null, activeButtons });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const buttonComponents = _getButtonComponents.call(\r\n      this,\r\n      this.state.toolbarButtons,\r\n      this.state.activeButtons\r\n    );\r\n\r\n    const onPress = (side, value) => {\r\n      this.props.handleSidePanelChange(side, value);\r\n    };\r\n    const onPressLeft = onPress.bind(this, 'left');\r\n    const onPressRight = onPress.bind(this, 'right');\r\n\r\n    return (\r\n      <>\r\n        <div className=\"ToolbarRow\">\r\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\r\n            <RoundedButtonGroup\r\n              options={this.buttonGroups.left}\r\n              value={this.props.selectedLeftSidePanel || ''}\r\n              onValueChanged={onPressLeft}\r\n            />\r\n          </div>\r\n          {buttonComponents}\r\n          <ConnectedLayoutButton />\r\n          <div\r\n            className=\"pull-right m-t-1 rm-x-1\"\r\n            style={{ marginLeft: 'auto' }}\r\n          >\r\n            {this.buttonGroups.right.length && (\r\n              <RoundedButtonGroup\r\n                options={this.buttonGroups.right}\r\n                value={this.props.selectedRightSidePanel || ''}\r\n                onValueChanged={onPressRight}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getCustomButtonComponent(button, activeButtons) {\r\n  const CustomComponent = button.CustomComponent;\r\n  const isValidComponent = typeof CustomComponent === 'function';\r\n\r\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\r\n  if (isValidComponent) {\r\n    const parentContext = this;\r\n    const activeButtonsIds = activeButtons.map(button => button.id);\r\n    const isActive = activeButtonsIds.includes(button.id);\r\n\r\n    return (\r\n      <CustomComponent\r\n        parentContext={parentContext}\r\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\r\n        button={button}\r\n        key={button.id}\r\n        activeButtons={activeButtonsIds}\r\n        isActive={isActive}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getExpandableButtonComponent(button, activeButtons) {\r\n  // Iterate over button definitions and update `onClick` behavior\r\n  let activeCommand;\r\n  const childButtons = button.buttons.map(childButton => {\r\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\r\n\r\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\r\n      activeCommand = childButton.id;\r\n    }\r\n\r\n    return childButton;\r\n  });\r\n\r\n  return (\r\n    <ExpandableToolMenu\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      buttons={childButtons}\r\n      activeCommand={activeCommand}\r\n    />\r\n  );\r\n}\r\n\r\nfunction _getDefaultButtonComponent(button, activeButtons) {\r\n  return (\r\n    <ToolbarButton\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      onClick={_handleToolbarButtonClick.bind(this, button)}\r\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\r\n    />\r\n  );\r\n}\r\n/**\r\n * Determine which extension buttons should be showing, if they're\r\n * active, and what their onClick behavior should be.\r\n */\r\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\r\n  const _this = this;\r\n  return toolbarButtons.map(button => {\r\n    const hasCustomComponent = button.CustomComponent;\r\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\r\n\r\n    if (hasCustomComponent) {\r\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    if (hasNestedButtonDefinitions) {\r\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\r\n  });\r\n}\r\n\r\n/**\r\n * TODO: DEPRECATE\r\n * This is used exclusively in `extensions/cornerstone/src`\r\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\r\n *\r\n * A handy way for us to handle different button types. IE. firing commands for\r\n * buttons, or initiation built in behavior.\r\n *\r\n * @param {*} button\r\n * @param {*} evt\r\n * @param {*} props\r\n */\r\nfunction _handleToolbarButtonClick(button, evt, props) {\r\n  const { activeButtons } = this.state;\r\n\r\n  if (button.commandName) {\r\n    const options = Object.assign({ evt }, button.commandOptions);\r\n    commandsManager.runCommand(button.commandName, options);\r\n  }\r\n\r\n  // TODO: Use Types ENUM\r\n  // TODO: We can update this to be a `getter` on the extension to query\r\n  //       For the active tools after we apply our updates?\r\n  if (button.type === 'setToolActive') {\r\n    const toggables = activeButtons.filter(\r\n      ({ options }) => options && !options.togglable\r\n    );\r\n    this.setState({ activeButtons: [...toggables, button] });\r\n  } else if (button.type === 'builtIn') {\r\n    this._handleBuiltIn(button);\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _getVisibleToolbarButtons() {\r\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\r\n  const toolbarButtonDefinitions = [];\r\n\r\n  toolbarModules.forEach(extension => {\r\n    const { definitions, defaultContext } = extension.module;\r\n    definitions.forEach(definition => {\r\n      const context = definition.context || defaultContext;\r\n\r\n      if (this.props.activeContexts.includes(context)) {\r\n        toolbarButtonDefinitions.push(definition);\r\n      }\r\n    });\r\n  });\r\n\r\n  return toolbarButtonDefinitions;\r\n}\r\n\r\nfunction _handleBuiltIn(button) {\r\n  /* TODO: Keep cine button active until its unselected. */\r\n  const { dialog, t } = this.props;\r\n  const { dialogId } = this.state;\r\n  const { id, options } = button;\r\n\r\n  if (options.behavior === 'CINE') {\r\n    if (dialogId) {\r\n      dialog.dismiss({ id: dialogId });\r\n      this.setState(state => ({\r\n        dialogId: null,\r\n        activeButtons: [\r\n          ...state.activeButtons.filter(button => button.id !== id),\r\n        ],\r\n      }));\r\n    } else {\r\n      const spacing = 20;\r\n      const { x, y } = document\r\n        .querySelector(`.ViewerMain`)\r\n        .getBoundingClientRect();\r\n      const newDialogId = dialog.create({\r\n        content: ConnectedCineDialog,\r\n        defaultPosition: {\r\n          x: x + spacing || 0,\r\n          y: y + spacing || 0,\r\n        },\r\n      });\r\n      this.setState(state => ({\r\n        dialogId: newDialogId,\r\n        activeButtons: [...state.activeButtons, button],\r\n      }));\r\n    }\r\n  }\r\n\r\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\r\n    commandsManager.runCommand('showDownloadViewportModal', {\r\n      title: t('Download High Quality Image'),\r\n    });\r\n  }\r\n}\r\n\r\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\r\n  withModal(withDialog(withAppContext(ToolbarRow)))\r\n);\r\n","import OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport { StudyBrowser } from '@ohif/ui';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport findDisplaySetByUID from './findDisplaySetByUID';\r\n\r\nconst { studyMetadataManager } = OHIF.utils;\r\n\r\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\r\n\r\n// TODO\r\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\r\n// - Pass in errors and stack loading progress from Redux\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // If we know that the stack loading progress details have changed,\r\n  // we can try to update the component state so that the thumbnail\r\n  // progress bar is updated\r\n  const stackLoadingProgressMap = state.loading.progress;\r\n  const studiesWithLoadingData = cloneDeep(ownProps.studies);\r\n\r\n  studiesWithLoadingData.forEach(study => {\r\n    study.thumbnails.forEach(data => {\r\n      const { displaySetInstanceUID } = data;\r\n      const stackId = `StackProgress:${displaySetInstanceUID}`;\r\n      const stackProgressData = stackLoadingProgressMap[stackId];\r\n\r\n      let stackPercentComplete = 0;\r\n      if (stackProgressData) {\r\n        stackPercentComplete = stackProgressData.percentComplete;\r\n      }\r\n\r\n      data.stackPercentComplete = stackPercentComplete;\r\n    });\r\n  });\r\n\r\n  return {\r\n    studies: studiesWithLoadingData,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onThumbnailClick: displaySetInstanceUID => {\r\n      let displaySet = findDisplaySetByUID(\r\n        ownProps.studyMetadata,\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      if (displaySet.isDerived) {\r\n        const { Modality } = displaySet;\r\n\r\n        displaySet = displaySet.getSourceDisplaySet(ownProps.studyMetadata);\r\n\r\n        if (!displaySet) {\r\n          throw new Error(\r\n            `Referenced series for ${Modality} dataset not present.`\r\n          );\r\n        }\r\n\r\n        if (!displaySet) {\r\n          throw new Error('Source data not present');\r\n        }\r\n      }\r\n\r\n      dispatch(setActiveViewportSpecificData(displaySet));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedStudyBrowser = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(StudyBrowser);\r\n\r\nexport default ConnectedStudyBrowser;\r\n","/**\r\n * Finds displaySet by UID across all displaySets inside studyMetadata\r\n * @param {Array} studyMetadata\r\n * @param {string} displaySetInstanceUID\r\n */\r\nexport default function findDisplaySetByUID(\r\n  studyMetadata,\r\n  displaySetInstanceUID\r\n) {\r\n  if (!Array.isArray(studyMetadata)) return null;\r\n\r\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\r\n    let currentDisplaySet = [];\r\n    if (current && Array.isArray(current.displaySets)) {\r\n      currentDisplaySet = current.displaySets;\r\n    }\r\n    return all.concat(currentDisplaySet);\r\n  }, []);\r\n\r\n  const bySetInstanceUID = ds =>\r\n    ds.displaySetInstanceUID === displaySetInstanceUID;\r\n\r\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\r\n  return displaySet || null;\r\n}\r\n","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport './ViewportPane.css';\r\n\r\nconst ViewportPane = function (props) {\r\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\r\n  const [{ hovered, highlighted }, drop] = useDrop({\r\n    accept: 'thumbnail',\r\n    drop: (droppedItem, monitor) => {\r\n      const canDrop = monitor.canDrop();\r\n      const isOver = monitor.isOver();\r\n\r\n      if (canDrop && isOver && onDrop) {\r\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\r\n\r\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\r\n      }\r\n    },\r\n    // Monitor, and collect props.\r\n    // Returned as values by `useDrop`\r\n    collect: monitor => ({\r\n      highlighted: monitor.canDrop(),\r\n      hovered: monitor.isOver(),\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        'viewport-drop-target',\r\n        { hovered: hovered },\r\n        { highlighted: highlighted },\r\n        propClassName\r\n      )}\r\n      ref={drop}\r\n      data-cy={`viewport-container-${viewportIndex}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportPane.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  onDrop: PropTypes.func.isRequired,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default ViewportPane;\r\n","import './ViewportGrid.css';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { utils } from '@ohif/core';\r\nimport { useSnackbarContext } from '@ohif/ui';\r\n//\r\nimport ViewportPane from './ViewportPane.js';\r\nimport DefaultViewport from './DefaultViewport.js';\r\nimport EmptyViewport from './EmptyViewport.js';\r\n\r\nconst { loadAndCacheDerivedDisplaySets } = utils;\r\n\r\nconst ViewportGrid = function(props) {\r\n  const {\r\n    activeViewportIndex,\r\n    availablePlugins,\r\n    defaultPlugin: defaultPluginName,\r\n    layout,\r\n    numRows,\r\n    numColumns,\r\n    setViewportData,\r\n    studies,\r\n    viewportData,\r\n    children,\r\n    isStudyLoaded,\r\n  } = props;\r\n\r\n  const rowSize = 100 / numRows;\r\n  const colSize = 100 / numColumns;\r\n\r\n  // http://grid.malven.co/\r\n  if (!viewportData || !viewportData.length) {\r\n    return null;\r\n  }\r\n\r\n  const snackbar = useSnackbarContext();\r\n\r\n  useEffect(() => {\r\n    if (isStudyLoaded) {\r\n      viewportData.forEach(displaySet => {\r\n        const promises = loadAndCacheDerivedDisplaySets(displaySet, studies);\r\n\r\n        promises.forEach(promise => {\r\n          promise.catch(error => {\r\n            snackbar.show({\r\n              title: 'Error loading derived display set:',\r\n              message: error.message,\r\n              type: 'error',\r\n              autoClose: false,\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [studies, viewportData, isStudyLoaded, snackbar]);\r\n\r\n  const getViewportPanes = () =>\r\n    layout.viewports.map((layout, viewportIndex) => {\r\n      const displaySet = viewportData[viewportIndex];\r\n\r\n      if (!displaySet) {\r\n        return null;\r\n      }\r\n\r\n      const data = {\r\n        displaySet,\r\n        studies,\r\n      };\r\n\r\n      // JAMES TODO:\r\n\r\n      // Use whichever plugin is currently in use in the panel\r\n      // unless nothing is specified. If nothing is specified\r\n      // and the display set has a plugin specified, use that.\r\n      //\r\n      // TODO: Change this logic to:\r\n      // - Plugins define how capable they are of displaying a SopClass\r\n      // - When updating a panel, ensure that the currently enabled plugin\r\n      // in the viewport is capable of rendering this display set. If not\r\n      // then use the most capable available plugin\r\n\r\n      const pluginName =\r\n        !layout.plugin && displaySet && displaySet.plugin\r\n          ? displaySet.plugin\r\n          : layout.plugin;\r\n\r\n      const ViewportComponent = _getViewportComponent(\r\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\r\n        viewportIndex,\r\n        children,\r\n        availablePlugins,\r\n        pluginName,\r\n        defaultPluginName\r\n      );\r\n\r\n      return (\r\n        <ViewportPane\r\n          onDrop={setViewportData}\r\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\r\n          className={classNames('viewport-container', {\r\n            active: activeViewportIndex === viewportIndex,\r\n          })}\r\n          key={viewportIndex}\r\n        >\r\n          {ViewportComponent}\r\n        </ViewportPane>\r\n      );\r\n    });\r\n\r\n  const ViewportPanes = React.useMemo(getViewportPanes, [\r\n    layout,\r\n    viewportData,\r\n    studies,\r\n    children,\r\n    availablePlugins,\r\n    defaultPluginName,\r\n    setViewportData,\r\n    activeViewportIndex,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      data-cy=\"viewprt-grid\"\r\n      style={{\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\r\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\r\n        height: '100%',\r\n        width: '100%',\r\n      }}\r\n    >\r\n      {ViewportPanes}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportGrid.propTypes = {\r\n  viewportData: PropTypes.array.isRequired,\r\n  supportsDrop: PropTypes.bool.isRequired,\r\n  activeViewportIndex: PropTypes.number.isRequired,\r\n  layout: PropTypes.object.isRequired,\r\n  availablePlugins: PropTypes.object.isRequired,\r\n  setViewportData: PropTypes.func.isRequired,\r\n  studies: PropTypes.array,\r\n  children: PropTypes.node,\r\n  defaultPlugin: PropTypes.string,\r\n  numRows: PropTypes.number.isRequired,\r\n  numColumns: PropTypes.number.isRequired,\r\n};\r\n\r\nViewportGrid.defaultProps = {\r\n  viewportData: [],\r\n  numRows: 1,\r\n  numColumns: 1,\r\n  layout: {\r\n    viewports: [{}],\r\n  },\r\n  activeViewportIndex: 0,\r\n  supportsDrop: true,\r\n  availablePlugins: {\r\n    DefaultViewport,\r\n  },\r\n  defaultPlugin: 'defaultViewportPlugin',\r\n};\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} plugin\r\n * @param {*} viewportData\r\n * @param {*} viewportIndex\r\n * @param {*} children\r\n * @returns\r\n */\r\nfunction _getViewportComponent(\r\n  viewportData,\r\n  viewportIndex,\r\n  children,\r\n  availablePlugins,\r\n  pluginName,\r\n  defaultPluginName\r\n) {\r\n  if (viewportData.displaySet) {\r\n    pluginName = pluginName || defaultPluginName;\r\n    const ViewportComponent = availablePlugins[pluginName];\r\n\r\n    if (!ViewportComponent) {\r\n      throw new Error(\r\n        `No Viewport Component available for name ${pluginName}.\r\n         Available plugins: ${JSON.stringify(availablePlugins)}`\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ViewportComponent\r\n        viewportData={viewportData}\r\n        viewportIndex={viewportIndex}\r\n        children={[children]}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <EmptyViewport />;\r\n}\r\n\r\nexport default ViewportGrid;\r\n","/**\r\n *\r\n *\r\n * @export\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function DefaultViewport(props) {\r\n  return <div>{JSON.stringify(props)}</div>;\r\n}\r\n","import ViewportGrid from './ViewportGrid.js';\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport { extensionManager } from './../../App.js';\r\nimport memoize from 'lodash/memoize';\r\n\r\nconst getAvailableViewportModules = memoize(viewportModules => {\r\n  const availableViewportModules = {};\r\n  viewportModules.forEach(moduleDefinition => {\r\n    availableViewportModules[moduleDefinition.extensionId] =\r\n      moduleDefinition.module;\r\n  });\r\n  return availableViewportModules;\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\r\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\r\n\r\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\r\n  let defaultPlugin;\r\n  if (viewportModules.length) {\r\n    defaultPlugin = viewportModules[0].extensionId;\r\n  }\r\n\r\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\r\n\r\n  return {\r\n    numRows,\r\n    numColumns,\r\n    layout,\r\n    activeViewportIndex,\r\n    // TODO: rename `availableViewportModules`\r\n    availablePlugins: availableViewportModules,\r\n    // TODO: rename `defaultViewportModule`\r\n    defaultPlugin,\r\n  };\r\n};\r\n\r\nconst ConnectedViewportGrid = connect(\r\n  mapStateToProps,\r\n  null\r\n)(ViewportGrid);\r\n\r\nexport default ConnectedViewportGrid;\r\n","import './ViewerMain.css';\r\n\r\nimport { Component } from 'react';\r\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport memoize from 'lodash/memoize';\r\nimport _values from 'lodash/values';\r\n\r\nvar values = memoize(_values);\r\n\r\nclass ViewerMain extends Component {\r\n  static propTypes = {\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    studies: PropTypes.array,\r\n    viewportSpecificData: PropTypes.object.isRequired,\r\n    layout: PropTypes.object.isRequired,\r\n    setViewportSpecificData: PropTypes.func.isRequired,\r\n    clearViewportSpecificData: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      displaySets: [],\r\n    };\r\n  }\r\n\r\n  getDisplaySets(studies) {\r\n    const displaySets = [];\r\n    studies.forEach(study => {\r\n      study.displaySets.forEach(dSet => {\r\n        if (!dSet.plugin) {\r\n          dSet.plugin = 'cornerstone';\r\n        }\r\n        displaySets.push(dSet);\r\n      });\r\n    });\r\n\r\n    return displaySets;\r\n  }\r\n\r\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\r\n    const study = studies.find(study => {\r\n      return study.StudyInstanceUID === StudyInstanceUID;\r\n    });\r\n\r\n    if (!study) {\r\n      return;\r\n    }\r\n\r\n    return study.displaySets.find(displaySet => {\r\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Add beforeUnload event handler to check for unsaved changes\r\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n\r\n    // Get all the display sets for the viewer studies\r\n    if (this.props.studies) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const prevViewportAmount = prevProps.layout.viewports.length;\r\n    const viewportAmount = this.props.layout.viewports.length;\r\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\r\n\r\n    if (\r\n      this.props.studies !== prevProps.studies ||\r\n      (viewportAmount !== prevViewportAmount && !isVtk)\r\n    ) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  fillEmptyViewportPanes = () => {\r\n    // TODO: Here is the entry point for filling viewports on load.\r\n    const dirtyViewportPanes = [];\r\n    const { layout, viewportSpecificData } = this.props;\r\n    const { displaySets } = this.state;\r\n\r\n    if (!displaySets || !displaySets.length) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < layout.viewports.length; i++) {\r\n      const viewportPane = viewportSpecificData[i];\r\n      const isNonEmptyViewport =\r\n        viewportPane &&\r\n        viewportPane.StudyInstanceUID &&\r\n        viewportPane.displaySetInstanceUID;\r\n\r\n      if (isNonEmptyViewport) {\r\n        dirtyViewportPanes.push({\r\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\r\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      const foundDisplaySet =\r\n        displaySets.find(\r\n          ds =>\r\n            !dirtyViewportPanes.some(\r\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\r\n            )\r\n        ) || displaySets[displaySets.length - 1];\r\n\r\n      dirtyViewportPanes.push(foundDisplaySet);\r\n    }\r\n\r\n    dirtyViewportPanes.forEach((vp, i) => {\r\n      if (vp && vp.StudyInstanceUID) {\r\n        this.setViewportData({\r\n          viewportIndex: i,\r\n          StudyInstanceUID: vp.StudyInstanceUID,\r\n          displaySetInstanceUID: vp.displaySetInstanceUID,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  setViewportData = ({\r\n    viewportIndex,\r\n    StudyInstanceUID,\r\n    displaySetInstanceUID,\r\n  }) => {\r\n    let displaySet = this.findDisplaySet(\r\n      this.props.studies,\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    if (displaySet.isDerived) {\r\n      const { Modality } = displaySet;\r\n      displaySet = displaySet.getSourceDisplaySet(this.props.studies);\r\n\r\n      if (!displaySet) {\r\n        throw new Error(\r\n          `Referenced series for ${Modality} dataset not present.`\r\n        );\r\n      }\r\n    }\r\n\r\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\r\n  };\r\n\r\n  render() {\r\n    const { viewportSpecificData } = this.props;\r\n    const viewportData = values(viewportSpecificData);\r\n\r\n    return (\r\n      <div className=\"ViewerMain\">\r\n        {this.state.displaySets.length && (\r\n          <ConnectedViewportGrid\r\n            isStudyLoaded={this.props.isStudyLoaded}\r\n            studies={this.props.studies}\r\n            viewportData={viewportData}\r\n            setViewportData={this.setViewportData}\r\n          >\r\n            {/* Children to add to each viewport that support children */}\r\n          </ConnectedViewportGrid>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Clear the entire viewport specific data\r\n    const { viewportSpecificData } = this.props;\r\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\r\n      this.props.clearViewportSpecificData(viewportIndex);\r\n    });\r\n\r\n    // TODO: These don't have to be viewer specific?\r\n    // Could qualify for other routes?\r\n    // hotkeys.destroy();\r\n\r\n    // Remove beforeUnload event handler...\r\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n    // Destroy the synchronizer used to update reference lines\r\n    //OHIF.viewer.updateImageSynchronizer.destroy();\r\n    // TODO: Instruct all plugins to clean up themselves\r\n    //\r\n    // Clear references to all stacks in the StackManager\r\n    //StackManager.clearStacks();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.Studies collection\r\n    //OHIF.viewer.Studies.removeAll();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.StudyMetadataList collection\r\n    //OHIF.viewer.StudyMetadataList.removeAll();\r\n  }\r\n}\r\n\r\nexport default ViewerMain;\r\n","import OHIF from '@ohif/core';\r\nimport ViewerMain from './ViewerMain';\r\nimport { connect } from 'react-redux';\r\n\r\nconst {\r\n  setViewportSpecificData,\r\n  clearViewportSpecificData,\r\n} = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\r\n\r\n  return {\r\n    activeViewportIndex,\r\n    layout,\r\n    viewportSpecificData,\r\n    viewports: state.viewports,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n    clearViewportSpecificData: () => {\r\n      dispatch(clearViewportSpecificData());\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewerMain = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewerMain);\r\n\r\nexport default ConnectedViewerMain;\r\n","import './SidePanel.css';\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nclass SidePanel extends Component {\r\n  static propTypes = {\r\n    from: PropTypes.string.isRequired,\r\n    isOpen: PropTypes.bool.isRequired,\r\n    children: PropTypes.node,\r\n    width: PropTypes.string,\r\n  };\r\n\r\n  render() {\r\n    const fromSideClass =\r\n      this.props.from === 'right' ? 'from-right' : 'from-left';\r\n\r\n    const styles = this.props.width\r\n      ? {\r\n          maxWidth: this.props.width,\r\n          marginRight: this.props.isOpen\r\n            ? '0'\r\n            : Number.parseInt(this.props.width) * -1,\r\n        }\r\n      : {};\r\n\r\n    return (\r\n      <section\r\n        style={styles}\r\n        className={classNames('sidepanel', fromSideClass, {\r\n          'is-open': this.props.isOpen,\r\n        })}\r\n      >\r\n        {this.props.children}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SidePanel;\r\n","import React, { useState } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { ErrorBoundary, Icon } from '@ohif/ui';\r\nimport { servicesManager } from './../../App';\r\n\r\nimport './ErrorBoundaryDialog.css';\r\n\r\nconst { UIModalService } = servicesManager.services;\r\n\r\nconst ErrorBoundaryDialog = ({ context, children }) => {\r\n  const handleOnError = (error, componentStack) => {\r\n    const ErrorDialog = () => {\r\n      const [open, setOpen] = useState(false);\r\n\r\n      return (\r\n        <div className=\"ErrorFallback\" role=\"alert\">\r\n          <div className=\"ErrorBoundaryDialog\">\r\n            <h3 className=\"ErrorBoundaryDialogTitle\">\r\n              {context}: <span>{error.message}</span>\r\n            </h3>\r\n          </div>\r\n          <button\r\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\r\n            onClick={() => setOpen(s => !s)}\r\n          >\r\n            <Icon\r\n              name=\"chevron-down\"\r\n              className={classnames('ErrorBoundaryDialogIcon', {\r\n                opened: open,\r\n              })}\r\n            />\r\n            Stack Trace\r\n          </button>\r\n\r\n          {open && <pre>{componentStack}</pre>}\r\n        </div>\r\n      );\r\n    };\r\n\r\n    UIModalService.show({\r\n      content: ErrorDialog,\r\n      title: `Something went wrong in ${context}`,\r\n    });\r\n  };\r\n\r\n  const fallbackComponent = () => (\r\n    <div className=\"ErrorFallback\" role=\"alert\">\r\n      <p>\r\n        Error rendering {context}. <br /> Check the browser console for more\r\n        details.\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ErrorBoundary\r\n      fallbackComponent={fallbackComponent}\r\n      context={context}\r\n      onError={handleOnError}\r\n    >\r\n      {children}\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nErrorBoundaryDialog.propTypes = {\r\n  context: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\r\nimport { withDialog } from '@ohif/ui';\r\nimport moment from 'moment';\r\nimport ConnectedHeader from './ConnectedHeader.js';\r\nimport ToolbarRow from './ToolbarRow.js';\r\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\r\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\r\nimport SidePanel from './../components/SidePanel.js';\r\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\r\nimport { extensionManager } from './../App.js';\r\n\r\n// Contexts\r\nimport WhiteLabelingContext from '../context/WhiteLabelingContext.js';\r\nimport UserManagerContext from '../context/UserManagerContext';\r\nimport AppContext from '../context/AppContext';\r\n\r\nimport './Viewer.css';\r\nimport { finished } from 'stream';\r\n\r\nclass Viewer extends Component {\r\n  static propTypes = {\r\n    studies: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        StudyInstanceUID: PropTypes.string.isRequired,\r\n        StudyDate: PropTypes.string,\r\n        PatientID: PropTypes.string,\r\n        displaySets: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            displaySetInstanceUID: PropTypes.string.isRequired,\r\n            SeriesDescription: PropTypes.string,\r\n            SeriesNumber: PropTypes.number,\r\n            InstanceNumber: PropTypes.number,\r\n            numImageFrames: PropTypes.number,\r\n            Modality: PropTypes.string.isRequired,\r\n            images: PropTypes.arrayOf(\r\n              PropTypes.shape({\r\n                getImageId: PropTypes.func.isRequired,\r\n              })\r\n            ),\r\n          })\r\n        ),\r\n      })\r\n    ),\r\n    studyInstanceUIDs: PropTypes.array,\r\n    activeServer: PropTypes.shape({\r\n      type: PropTypes.string,\r\n      wadoRoot: PropTypes.string,\r\n    }),\r\n    onTimepointsUpdated: PropTypes.func,\r\n    onMeasurementsUpdated: PropTypes.func,\r\n    // window.store.getState().viewports.viewportSpecificData\r\n    viewports: PropTypes.object.isRequired,\r\n    // window.store.getState().viewports.activeViewportIndex\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    isStudyLoaded: PropTypes.bool,\r\n    dialog: PropTypes.object,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { activeServer } = this.props;\r\n    const server = Object.assign({}, activeServer);\r\n\r\n    OHIF.measurements.MeasurementApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: DICOMSR.retrieveMeasurements,\r\n        store: DICOMSR.storeMeasurements,\r\n      },\r\n      server,\r\n    });\r\n\r\n    OHIF.measurements.TimepointApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: this.retrieveTimepoints,\r\n        store: this.storeTimepoints,\r\n        remove: this.removeTimepoint,\r\n        update: this.updateTimepoint,\r\n        disassociate: this.disassociateStudy,\r\n      },\r\n    });\r\n  }\r\n\r\n  state = {\r\n    isLeftSidePanelOpen: true,\r\n    isRightSidePanelOpen: false,\r\n    selectedRightSidePanel: '',\r\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\r\n    thumbnails: [],\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.dialog) {\r\n      this.props.dialog.dismissAll();\r\n    }\r\n  }\r\n\r\n  retrieveTimepoints = filter => {\r\n    OHIF.log.info('retrieveTimepoints');\r\n\r\n    // Get the earliest and latest study date\r\n    let earliestDate = new Date().toISOString();\r\n    let latestDate = new Date().toISOString();\r\n    if (this.props.studies) {\r\n      latestDate = new Date('1000-01-01').toISOString();\r\n      this.props.studies.forEach(study => {\r\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\r\n        if (StudyDate < earliestDate) {\r\n          earliestDate = StudyDate;\r\n        }\r\n        if (StudyDate > latestDate) {\r\n          latestDate = StudyDate;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Return a generic timepoint\r\n    return Promise.resolve([\r\n      {\r\n        timepointType: 'baseline',\r\n        timepointId: 'TimepointId',\r\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\r\n        PatientID: filter.PatientID,\r\n        earliestDate,\r\n        latestDate,\r\n        isLocked: false,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  storeTimepoints = timepointData => {\r\n    OHIF.log.info('storeTimepoints');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  updateTimepoint = (timepointData, query) => {\r\n    OHIF.log.info('updateTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  removeTimepoint = timepointId => {\r\n    OHIF.log.info('removeTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\r\n    OHIF.log.info('disassociateStudy');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  onTimepointsUpdated = timepoints => {\r\n    if (this.props.onTimepointsUpdated) {\r\n      this.props.onTimepointsUpdated(timepoints);\r\n    }\r\n  };\r\n\r\n  onMeasurementsUpdated = measurements => {\r\n    if (this.props.onMeasurementsUpdated) {\r\n      this.props.onMeasurementsUpdated(measurements);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { studies, isStudyLoaded } = this.props;\r\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\r\n    const currentTimepointId = 'TimepointId';\r\n\r\n    const timepointApi = new TimepointApi(currentTimepointId, {\r\n      onTimepointsUpdated: this.onTimepointsUpdated,\r\n    });\r\n\r\n    const measurementApi = new MeasurementApi(timepointApi, {\r\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\r\n    });\r\n\r\n    this.currentTimepointId = currentTimepointId;\r\n    this.timepointApi = timepointApi;\r\n    this.measurementApi = measurementApi;\r\n\r\n    if (studies) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n\r\n      timepointApi.retrieveTimepoints({ PatientID });\r\n      if (isStudyLoaded) {\r\n        this.measurementApi.retrieveMeasurements(PatientID, [\r\n          currentTimepointId,\r\n        ]);\r\n      }\r\n\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(studies),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { studies, isStudyLoaded } = this.props;\r\n\r\n    if (studies !== prevProps.studies) {\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(studies),\r\n      });\r\n    }\r\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n      const { currentTimepointId } = this;\r\n\r\n      this.timepointApi.retrieveTimepoints({ PatientID });\r\n      this.measurementApi.retrieveMeasurements(PatientID, [currentTimepointId]);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let VisiblePanelLeft, VisiblePanelRight;\r\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    panelExtensions.forEach(panelExt => {\r\n      panelExt.module.components.forEach(comp => {\r\n        if (comp.id === this.state.selectedRightSidePanel) {\r\n          VisiblePanelRight = comp.component;\r\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\r\n          VisiblePanelLeft = comp.component;\r\n        }\r\n      });\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {/* HEADER */}\r\n        <WhiteLabelingContext.Consumer>\r\n          {whiteLabeling => (\r\n            <UserManagerContext.Consumer>\r\n              {userManager => (\r\n                <AppContext.Consumer>\r\n                  {appContext => (\r\n                    <ConnectedHeader\r\n                      linkText={\r\n                        appContext.appConfig.showStudyList\r\n                          ? 'Study List'\r\n                          : undefined\r\n                      }\r\n                      linkPath={\r\n                        appContext.appConfig.showStudyList ? '/' : undefined\r\n                      }\r\n                      userManager={userManager}\r\n                    >\r\n                      {whiteLabeling &&\r\n                        whiteLabeling.createLogoComponentFn &&\r\n                        whiteLabeling.createLogoComponentFn(React)}\r\n                    </ConnectedHeader>\r\n                  )}\r\n                </AppContext.Consumer>\r\n              )}\r\n            </UserManagerContext.Consumer>\r\n          )}\r\n        </WhiteLabelingContext.Consumer>\r\n\r\n        {/* TOOLBAR */}\r\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\r\n          <ToolbarRow\r\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\r\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\r\n            selectedLeftSidePanel={\r\n              this.state.isLeftSidePanelOpen\r\n                ? this.state.selectedLeftSidePanel\r\n                : ''\r\n            }\r\n            selectedRightSidePanel={\r\n              this.state.isRightSidePanelOpen\r\n                ? this.state.selectedRightSidePanel\r\n                : ''\r\n            }\r\n            handleSidePanelChange={(side, selectedPanel) => {\r\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\r\n              const openKey = `is${sideClicked}SidePanelOpen`;\r\n              const selectedKey = `selected${sideClicked}SidePanel`;\r\n              const updatedState = Object.assign({}, this.state);\r\n\r\n              const isOpen = updatedState[openKey];\r\n              const prevSelectedPanel = updatedState[selectedKey];\r\n              // RoundedButtonGroup returns `null` if selected button is clicked\r\n              const isSameSelectedPanel =\r\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\r\n\r\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\r\n\r\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\r\n              if (isClosedOrShouldClose) {\r\n                updatedState[openKey] = !updatedState[openKey];\r\n              }\r\n\r\n              this.setState(updatedState);\r\n            }}\r\n            studies={this.props.studies}\r\n          />\r\n        </ErrorBoundaryDialog>\r\n\r\n        {/*<ConnectedStudyLoadingMonitor studies={this.props.studies} />*/}\r\n        {/*<StudyPrefetcher studies={this.props.studies} />*/}\r\n\r\n        {/* VIEWPORTS + SIDEPANELS */}\r\n        <div className=\"FlexboxLayout\">\r\n          {/* LEFT */}\r\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\r\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\r\n              {VisiblePanelLeft ? (\r\n                <VisiblePanelLeft\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                />\r\n              ) : (\r\n                <ConnectedStudyBrowser\r\n                  studies={this.state.thumbnails}\r\n                  studyMetadata={this.props.studies}\r\n                />\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n\r\n          {/* MAIN */}\r\n          <div className={classNames('main-content')}>\r\n            <ErrorBoundaryDialog context=\"ViewerMain\">\r\n              <ConnectedViewerMain\r\n                studies={this.props.studies}\r\n                isStudyLoaded={this.props.isStudyLoaded}\r\n              />\r\n            </ErrorBoundaryDialog>\r\n          </div>\r\n\r\n          {/* RIGHT */}\r\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\r\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\r\n              {VisiblePanelRight && (\r\n                <VisiblePanelRight\r\n                  isOpen={this.state.isRightSidePanelOpen}\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                />\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withDialog(Viewer);\r\n\r\n/**\r\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\r\n * a mapping layer?\r\n *\r\n * TODO[react]:\r\n * - Add showStackLoadingProgressBar option\r\n *\r\n * @param {Study[]} studies\r\n * @param {DisplaySet[]} studies[].displaySets\r\n */\r\nconst _mapStudiesToThumbnails = function(studies) {\r\n  return studies.map(study => {\r\n    const { StudyInstanceUID } = study;\r\n\r\n    const thumbnails = study.displaySets.map(displaySet => {\r\n      const {\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        InstanceNumber,\r\n        numImageFrames,\r\n        SeriesNumber,\r\n      } = displaySet;\r\n\r\n      let imageId;\r\n      let altImageText;\r\n\r\n      if (displaySet.Modality && displaySet.Modality === 'SEG') {\r\n        // TODO: We want to replace this with a thumbnail showing\r\n        // the segmentation map on the image, but this is easier\r\n        // and better than what we have right now.\r\n        altImageText = 'SEG';\r\n      } else if (displaySet.images && displaySet.images.length) {\r\n        const imageIndex = Math.floor(displaySet.images.length / 2);\r\n\r\n        imageId = displaySet.images[imageIndex].getImageId();\r\n      } else {\r\n        altImageText = displaySet.Modality ? displaySet.Modality : 'UN';\r\n      }\r\n\r\n      return {\r\n        imageId,\r\n        altImageText,\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        InstanceNumber,\r\n        numImageFrames,\r\n        SeriesNumber,\r\n      };\r\n    });\r\n\r\n    return {\r\n      StudyInstanceUID,\r\n      thumbnails,\r\n    };\r\n  });\r\n};\r\n","import { connect } from 'react-redux';\r\nimport Viewer from './Viewer.js';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\r\n\r\nconst getActiveServer = servers => {\r\n  const isActive = a => a.active === true;\r\n  return servers.servers.find(isActive);\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { viewports, servers } = state;\r\n  return {\r\n    viewports: viewports.viewportSpecificData,\r\n    activeViewportIndex: viewports.activeViewportIndex,\r\n    activeServer: getActiveServer(servers),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onTimepointsUpdated: timepoints => {\r\n      dispatch(setTimepoints(timepoints));\r\n    },\r\n    onMeasurementsUpdated: measurements => {\r\n      dispatch(setMeasurements(measurements));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Viewer);\r\n\r\nexport default ConnectedViewer;\r\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\r\nimport { metadata, studies, utils, log } from '@ohif/core';\r\nimport usePrevious from '../customHooks/usePrevious';\r\n\r\nimport ConnectedViewer from './ConnectedViewer.js';\r\nimport PropTypes from 'prop-types';\r\nimport { extensionManager } from './../App.js';\r\nimport { useSnackbarContext } from '@ohif/ui';\r\n\r\n// Contexts\r\nimport AppContext from '../context/AppContext';\r\n\r\nconst { OHIFStudyMetadata, OHIFSeriesMetadata } = metadata;\r\nconst { retrieveStudiesMetadata, deleteStudyMetadataPromise } = studies;\r\nconst { studyMetadataManager, makeCancelable } = utils;\r\n\r\nconst _promoteToFront = (list, values, searchMethod) => {\r\n  let listCopy = [...list];\r\n  let response = [];\r\n  let promotedCount = 0;\r\n\r\n  const arrayValues = values.split(',');\r\n  arrayValues.forEach(value => {\r\n    const index = listCopy.findIndex(searchMethod.bind(undefined, value));\r\n\r\n    if (index >= 0) {\r\n      const [itemToPromote] = listCopy.splice(index, 1);\r\n      response[promotedCount] = itemToPromote;\r\n      promotedCount++;\r\n    }\r\n  });\r\n\r\n  return {\r\n    promoted: promotedCount === arrayValues.length,\r\n    data: [...response, ...listCopy],\r\n  };\r\n};\r\n\r\n/**\r\n * Promote series to front if find found equivalent on filters object\r\n * @param {Object} study - study reference to promote series against\r\n * @param {Object} [filters] - Object containing filters to be applied\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\r\n */\r\nconst _promoteList = (study, studyMetadata, filters, isFilterStrategy) => {\r\n  let promoted = false;\r\n  // Promote only if no filter should be applied\r\n  if (!isFilterStrategy) {\r\n    promoted = _promoteStudyDisplaySet(study, studyMetadata, filters);\r\n  }\r\n\r\n  return promoted;\r\n};\r\n\r\nconst _promoteStudyDisplaySet = (study, studyMetadata, filters) => {\r\n  let promoted = false;\r\n  const queryParamsLength = Object.keys(filters).length;\r\n  const shouldPromoteToFront = queryParamsLength > 0;\r\n\r\n  if (shouldPromoteToFront) {\r\n    const { seriesInstanceUID } = filters;\r\n\r\n    const _seriesLookup = (valueToCompare, displaySet) => {\r\n      return displaySet.SeriesInstanceUID === valueToCompare;\r\n    };\r\n    const promotedResponse = _promoteToFront(\r\n      studyMetadata.getDisplaySets(),\r\n      seriesInstanceUID,\r\n      _seriesLookup\r\n    );\r\n\r\n    study.displaySets = promotedResponse.data;\r\n    promoted = promotedResponse.promoted;\r\n  }\r\n\r\n  return promoted;\r\n};\r\n\r\n/**\r\n * Method to identify if query param (from url) was applied to given list\r\n * @param {Object} study - study reference to promote series against\r\n * @param {Object} [filters] - Object containing filters to be applied\r\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\r\n */\r\nconst _isQueryParamApplied = (study, filters = {}, isFilterStrategy) => {\r\n  const { seriesInstanceUID } = filters;\r\n  let applied = true;\r\n  // skip in case no filter or no toast manager\r\n\r\n  if (!seriesInstanceUID) {\r\n    return applied;\r\n  }\r\n  const seriesInstanceUIDs = seriesInstanceUID.split(',');\r\n\r\n  let validateFilterApplied = () => {\r\n    const sameSize = arrayToInspect.length === seriesInstanceUIDs.length;\r\n    if (!sameSize) {\r\n      return;\r\n    }\r\n\r\n    return arrayToInspect.every(item =>\r\n      seriesInstanceUIDs.some(\r\n        seriesInstanceUIDStr => seriesInstanceUIDStr === item.SeriesInstanceUID\r\n      )\r\n    );\r\n  };\r\n\r\n  let validatePromoteApplied = () => {\r\n    let isValid = true;\r\n    for (let index = 0; index < seriesInstanceUIDs.length; index++) {\r\n      const seriesInstanceUIDStr = seriesInstanceUIDs[index];\r\n      const resultSeries = arrayToInspect[index];\r\n\r\n      if (\r\n        !resultSeries ||\r\n        resultSeries.SeriesInstanceUID !== seriesInstanceUIDStr\r\n      ) {\r\n        isValid = false;\r\n        break;\r\n      }\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  const { series = [], displaySets = [] } = study;\r\n  const arrayToInspect = isFilterStrategy ? series : displaySets;\r\n  const validateMethod = isFilterStrategy\r\n    ? validateFilterApplied\r\n    : validatePromoteApplied;\r\n\r\n  if (!arrayToInspect) {\r\n    applied = false;\r\n  } else {\r\n    applied = validateMethod();\r\n  }\r\n\r\n  return applied;\r\n};\r\nconst _showUserMessage = (queryParamApplied, message, dialog = {}) => {\r\n  if (queryParamApplied) {\r\n    return;\r\n  }\r\n\r\n  const { show: showUserMessage = () => {} } = dialog;\r\n  showUserMessage({\r\n    message,\r\n  });\r\n};\r\n\r\nconst _addSeriesToStudy = (studyMetadata, series) => {\r\n  const sopClassHandlerModules =\r\n    extensionManager.modules['sopClassHandlerModule'];\r\n  const study = studyMetadata.getData();\r\n  const seriesMetadata = new OHIFSeriesMetadata(series, study);\r\n  const existingSeries = studyMetadata.getSeriesByUID(series.SeriesInstanceUID);\r\n  if (existingSeries) {\r\n    studyMetadata.updateSeries(series.SeriesInstanceUID, seriesMetadata);\r\n  } else {\r\n    studyMetadata.addSeries(seriesMetadata);\r\n  }\r\n\r\n  studyMetadata.createAndAddDisplaySetsForSeries(\r\n    sopClassHandlerModules,\r\n    seriesMetadata\r\n  );\r\n\r\n  study.displaySets = studyMetadata.getDisplaySets();\r\n  study.derivedDisplaySets = studyMetadata.getDerivedDatasets({\r\n    Modality: series.Modality,\r\n  });\r\n\r\n  _updateStudyMetadataManager(study, studyMetadata);\r\n};\r\n\r\nconst _updateStudyMetadataManager = (study, studyMetadata) => {\r\n  const { StudyInstanceUID } = study;\r\n\r\n  if (!studyMetadataManager.get(StudyInstanceUID)) {\r\n    studyMetadataManager.add(studyMetadata);\r\n  }\r\n};\r\n\r\nconst _updateStudyDisplaySets = (study, studyMetadata) => {\r\n  const sopClassHandlerModules =\r\n    extensionManager.modules['sopClassHandlerModule'];\r\n\r\n  if (!study.displaySets) {\r\n    study.displaySets = studyMetadata.createDisplaySets(sopClassHandlerModules);\r\n  }\r\n\r\n  if (study.derivedDisplaySets) {\r\n    studyMetadata._addDerivedDisplaySets(study.derivedDisplaySets);\r\n  }\r\n};\r\n\r\nconst _thinStudyData = study => {\r\n  return {\r\n    StudyInstanceUID: study.StudyInstanceUID,\r\n    series: study.series.map(item => ({\r\n      SeriesInstanceUID: item.SeriesInstanceUID,\r\n    })),\r\n  };\r\n};\r\n\r\nfunction ViewerRetrieveStudyData({\r\n  server,\r\n  studyInstanceUIDs,\r\n  seriesInstanceUIDs,\r\n  clearViewportSpecificData,\r\n  setStudyData,\r\n}) {\r\n  // hooks\r\n  const [error, setError] = useState(false);\r\n  const [studies, setStudies] = useState([]);\r\n  const [isStudyLoaded, setIsStudyLoaded] = useState(false);\r\n  const snackbarContext = useSnackbarContext();\r\n  const { appConfig = {} } = useContext(AppContext);\r\n  const {\r\n    filterQueryParam: isFilterStrategy = false,\r\n    maxConcurrentMetadataRequests,\r\n  } = appConfig;\r\n\r\n  let cancelableSeriesPromises;\r\n  let cancelableStudiesPromises;\r\n  /**\r\n   * Callback method when study is totally loaded\r\n   * @param {object} study study loaded\r\n   * @param {object} studyMetadata studyMetadata for given study\r\n   * @param {Object} [filters] - Object containing filters to be applied\r\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\r\n   */\r\n  const studyDidLoad = (study, studyMetadata, filters) => {\r\n    // User message\r\n    const promoted = _promoteList(\r\n      study,\r\n      studyMetadata,\r\n      filters,\r\n      isFilterStrategy\r\n    );\r\n\r\n    // Clear viewport to allow new promoted one to be displayed\r\n    if (promoted) {\r\n      clearViewportSpecificData(0);\r\n    }\r\n\r\n    const isQueryParamApplied = _isQueryParamApplied(\r\n      study,\r\n      filters,\r\n      isFilterStrategy\r\n    );\r\n    // Show message in case not promoted neither filtered but should to\r\n    _showUserMessage(\r\n      isQueryParamApplied,\r\n      'Query parameters were not totally applied. It might be using original series list for given study.',\r\n      snackbarContext\r\n    );\r\n\r\n    setStudies([...studies, study]);\r\n    setIsStudyLoaded(true);\r\n  };\r\n\r\n  /**\r\n   * Method to process studies. It will update displaySet, studyMetadata, load remaining series, ...\r\n   * @param {Array} studiesData Array of studies retrieved from server\r\n   * @param {Object} [filters] - Object containing filters to be applied\r\n   * @param {string} [filters.seriesInstanceUID] - series instance uid to filter results against\r\n   */\r\n  const processStudies = (studiesData, filters) => {\r\n    if (Array.isArray(studiesData) && studiesData.length > 0) {\r\n      // Map studies to new format, update metadata manager?\r\n      const studies = studiesData.map(study => {\r\n        setStudyData(study.StudyInstanceUID, _thinStudyData(study));\r\n        const studyMetadata = new OHIFStudyMetadata(\r\n          study,\r\n          study.StudyInstanceUID\r\n        );\r\n\r\n        _updateStudyDisplaySets(study, studyMetadata);\r\n        _updateStudyMetadataManager(study, studyMetadata);\r\n\r\n        // Attempt to load remaning series if any\r\n        cancelableSeriesPromises[study.StudyInstanceUID] = makeCancelable(\r\n          loadRemainingSeries(studyMetadata)\r\n        )\r\n          .then(result => {\r\n            if (result && !result.isCanceled) {\r\n              studyDidLoad(study, studyMetadata, filters);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            if (error && !error.isCanceled) {\r\n              setError(true);\r\n              log.error(error);\r\n            }\r\n          });\r\n\r\n        return study;\r\n      });\r\n\r\n      setStudies(studies);\r\n    }\r\n  };\r\n\r\n  const forceRerender = () => setStudies(studies => [...studies]);\r\n\r\n  const loadRemainingSeries = async studyMetadata => {\r\n    const { seriesLoader } = studyMetadata.getData();\r\n    if (!seriesLoader) return;\r\n\r\n    const loadNextSeries = async () => {\r\n      if (!seriesLoader.hasNext()) return;\r\n      const series = await seriesLoader.next();\r\n      _addSeriesToStudy(studyMetadata, series);\r\n      forceRerender();\r\n      return loadNextSeries();\r\n    };\r\n\r\n    const concurrentRequestsAllowed =\r\n      maxConcurrentMetadataRequests || studyMetadata.getSeriesCount();\r\n    const promises = Array(concurrentRequestsAllowed)\r\n      .fill(null)\r\n      .map(loadNextSeries);\r\n\r\n    return await Promise.all(promises);\r\n  };\r\n\r\n  const loadStudies = async () => {\r\n    try {\r\n      const filters = {};\r\n      // Use the first, discard others\r\n      const seriesInstanceUID = seriesInstanceUIDs && seriesInstanceUIDs[0];\r\n      const retrieveParams = [server, studyInstanceUIDs];\r\n\r\n      if (seriesInstanceUID) {\r\n        filters.seriesInstanceUID = seriesInstanceUID;\r\n        // Query param filtering controlled by appConfig property\r\n        if (isFilterStrategy) {\r\n          retrieveParams.push(filters);\r\n        }\r\n      }\r\n\r\n      if (\r\n        appConfig.splitQueryParameterCalls ||\r\n        appConfig.enableGoogleCloudAdapter\r\n      ) {\r\n        retrieveParams.push(true); // Seperate SeriesInstanceUID filter calls.\r\n      }\r\n\r\n      cancelableStudiesPromises[studyInstanceUIDs] = makeCancelable(\r\n        retrieveStudiesMetadata(...retrieveParams)\r\n      )\r\n        .then(result => {\r\n          if (result && !result.isCanceled) {\r\n            processStudies(result, filters);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          if (error && !error.isCanceled) {\r\n            setError(true);\r\n            log.error(error);\r\n          }\r\n        });\r\n    } catch (error) {\r\n      if (error) {\r\n        setError(true);\r\n        log.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const purgeCancellablePromises = useCallback(() => {\r\n    for (let studyInstanceUIDs in cancelableStudiesPromises) {\r\n      if ('cancel' in cancelableStudiesPromises[studyInstanceUIDs]) {\r\n        cancelableStudiesPromises[studyInstanceUIDs].cancel();\r\n      }\r\n    }\r\n\r\n    for (let studyInstanceUIDs in cancelableSeriesPromises) {\r\n      if ('cancel' in cancelableSeriesPromises[studyInstanceUIDs]) {\r\n        cancelableSeriesPromises[studyInstanceUIDs].cancel();\r\n        deleteStudyMetadataPromise(studyInstanceUIDs);\r\n        studyMetadataManager.remove(studyInstanceUIDs);\r\n      }\r\n    }\r\n  });\r\n\r\n  const prevStudyInstanceUIDs = usePrevious(studyInstanceUIDs);\r\n\r\n  useEffect(() => {\r\n    const hasStudyInstanceUIDsChanged = !(\r\n      prevStudyInstanceUIDs &&\r\n      prevStudyInstanceUIDs.every(e => studyInstanceUIDs.includes(e))\r\n    );\r\n\r\n    if (hasStudyInstanceUIDsChanged) {\r\n      studyMetadataManager.purge();\r\n      purgeCancellablePromises();\r\n    }\r\n  }, [prevStudyInstanceUIDs, purgeCancellablePromises, studyInstanceUIDs]);\r\n\r\n  useEffect(() => {\r\n    cancelableSeriesPromises = {};\r\n    cancelableStudiesPromises = {};\r\n    loadStudies();\r\n\r\n    return () => {\r\n      purgeCancellablePromises();\r\n    };\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <div>Error: {JSON.stringify(error)}</div>;\r\n  }\r\n\r\n  return (\r\n    <ConnectedViewer\r\n      studies={studies}\r\n      isStudyLoaded={isStudyLoaded}\r\n      studyInstanceUIDs={studyInstanceUIDs}\r\n    />\r\n  );\r\n}\r\n\r\nViewerRetrieveStudyData.propTypes = {\r\n  studyInstanceUIDs: PropTypes.array.isRequired,\r\n  seriesInstanceUIDs: PropTypes.array,\r\n  server: PropTypes.object,\r\n  clearViewportSpecificData: PropTypes.func.isRequired,\r\n  setStudyData: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ViewerRetrieveStudyData;\r\n","import { connect } from 'react-redux';\r\nimport ViewerRetrieveStudyData from './ViewerRetrieveStudyData.js';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { clearViewportSpecificData, setStudyData } = OHIF.redux.actions;\r\nconst isActive = a => a.active === true;\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const activeServer = state.servers.servers.find(isActive);\r\n\r\n  return {\r\n    server: ownProps.server || activeServer,\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setStudyData: (StudyInstanceUID, data) => {\r\n      dispatch(setStudyData(StudyInstanceUID, data));\r\n    },\r\n    clearViewportSpecificData: () => {\r\n      dispatch(clearViewportSpecificData());\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewerRetrieveStudyData = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewerRetrieveStudyData);\r\n\r\nexport default ConnectedViewerRetrieveStudyData;\r\n"],"sourceRoot":""}