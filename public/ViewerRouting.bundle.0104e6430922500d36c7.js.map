{"version":3,"sources":["webpack:///./customHooks/useQuery.js","webpack:///./routes/ViewerRouting.js","webpack:///./googleCloud/api/GoogleCloudApi.js","webpack:///./googleCloud/utils/getServers.js","webpack:///./customHooks/useServer.js"],"names":["URLSearchParams","useLocation","search","UrlUtil","utils","urlUtil","getSeriesInstanceUIDs","seriesInstanceUIDs","routeLocation","queryFilters","queryString","getQueryFilters","querySeriesUIDs","_seriesInstanceUIDs","paramString","parseParam","ViewerRouting","routeMatch","match","location","params","project","dataset","dicomStore","studyInstanceUIDs","authToken","useQuery","get","user","getAccessToken","server","useServer","studyUIDs","seriesUIDs","ConnectedViewerRetrieveStudyData","propTypes","PropTypes","shape","string","isRequired","any","GoogleCloudApi","accessToken","console","error","this","urlBase","urlStr","config","url","URL","data","fetch","fetchConfig","response","json","status","nextPageToken","pageToken","doRequest","key","subPage","hasOwnProperty","concat","isError","message","projectId","urlBaseProject","locationId","Error","method","headers","Authorization","healthcareApiEndpoint","getServers","name","wadoUriRoot","qidoRoot","wadoRoot","imageRendering","thumbnailRendering","type","active","supportsFuzzyMatching","qidoSupportsIncludeField","isValidServer","isEqualServer","toCompare","serverLength","Object","keys","length","toCompareLength","getActiveServer","servers","find","a","appConfig","enableGoogleCloudAdapter","pathUrl","getUrlBaseDicomWeb","GoogleCloudUtilServers","setServers","dispatch","useServerFromUrl","previousServers","activeServer","urlBasedServers","serverHasChanged","newServer","exists","some","bind","undefined","useSelector","state","usePrevious","useDispatch","useContext","AppContext"],"mappings":"gLAQe,aACb,OAAO,IAAIA,gBAAgBC,cAAcC,SCF1BC,EAAYC,IAArBC,QAOFC,EAAwB,SAACC,EAAoBC,GACjD,IAAMC,EAAeN,EAAQO,YAAYC,gBAAgBH,GACnDI,EAAkBH,GAAgBA,EAAY,kBAC9CI,EAAsBN,GAAsBK,EAElD,OAAOT,EAAQW,YAAYC,WAAWF,IAGxC,SAASG,EAAT,GAAuE,IAAvCC,EAAuC,EAA9CC,MAA6BV,EAAiB,EAA3BW,SAA2B,EAQjEF,EAAWG,OANbC,EAFmE,EAEnEA,QACAF,EAHmE,EAGnEA,SACAG,EAJmE,EAInEA,QACAC,EALmE,EAKnEA,WACAC,EANmE,EAMnEA,kBACAjB,EAPmE,EAOnEA,mBAQIkB,EADMC,IACYC,IAAI,SAExBF,IACFG,IAAKC,eAAiB,kBAAMJ,IAG9B,IAAMK,EAASC,YAAU,CAAEV,UAASF,WAAUG,UAASC,eACjDS,EAAY7B,EAAQW,YAAYC,WAAWS,GAC3CS,EAAa3B,EAAsBC,EAAoBC,GAE7D,OAAIsB,GAAUE,EAEV,kBAACE,EAAA,EAAD,CACEV,kBAAmBQ,EACnBzB,mBAAoB0B,IAKnB,KAGTjB,EAAcmB,UAAY,CACxBjB,MAAOkB,IAAUC,MAAM,CACrBjB,OAAQgB,IAAUC,MAAM,CACtBb,kBAAmBY,IAAUE,OAAOC,WACpChC,mBAAoB6B,IAAUE,OAC9BhB,QAASc,IAAUE,OACnBf,WAAYa,IAAUE,OACtBnB,SAAUiB,IAAUE,OACpBjB,QAASe,IAAUE,WAGvBnB,SAAUiB,IAAUI,KAGPxB,a,8qCCzETyB,E,sMACWC,GACRA,GAAaC,QAAQC,MAAM,yBAChCC,KAAKH,YAAcA,I,yCAyBFrB,EAASF,EAAUG,EAASC,GAC7C,OACEsB,KAAKC,QAAL,oBACazB,EADb,sBACkCF,EADlC,qBACuDG,EADvD,wBAC8EC,EAD9E,e,iCAKOF,EAASF,EAAUG,EAASC,GACrC,oBAAaF,EAAb,sBAAkCF,EAAlC,qBAAuDG,EAAvD,wBAA8EC,K,gEAGhEwB,G,qHAAQC,E,+BAAS,GAAI5B,E,+BAAS,GACtC6B,EAAM,IAAIC,IAAIH,GAChBI,EAAO,KACXF,EAAI/C,OAAS,IAAIF,gBAAgBoB,G,kBAGRgC,MAAMH,EAAD,KAAWJ,KAAKQ,YAAhB,CAA6BL,Y,cAAnDM,E,0BAESA,EAASC,O,QAAtBJ,E,sEAEEG,EAASE,QAAU,KAAOF,EAASE,OAAS,KAAe,MAARL,G,oBAC3B,MAAtBA,EAAKM,c,wBACPrC,EAAOsC,UAAYP,EAAKM,c,UACJZ,KAAKc,UAAUZ,EAAQC,EAAQ5B,G,QACnD,IAASwC,KADLC,E,OACYV,EACVA,EAAKW,eAAeF,KACtBT,EAAKS,GAAOT,EAAKS,GAAKG,OAAOF,EAAQV,KAAKS,K,iCAIzC,CACLI,SAAS,EACTR,OAAQF,EAASE,OACjBL,S,iCAGK,CACLa,SAAS,EACTR,OAAQF,EAASE,OACjBS,QACGd,GAAQA,EAAKP,OAASO,EAAKP,MAAMqB,SAAY,kB,8DAIhDd,IAAQA,EAAKP,M,0CACR,CACLoB,SAAS,EACTR,OAAQ,KAAIA,OACZS,QAAS,KAAIX,SAASH,KAAKP,MAAMqB,SAAW,sB,iCAGzC,CACLD,SAAS,EACTC,QAAU,MAAO,KAAIA,SAAY,+B,6RAM9BpB,KAAKc,UACV,4D,iKAIgBO,G,yGACXrB,KAAKc,UAAL,UAAkBd,KAAKsB,eAAvB,YAAyCD,EAAzC,gB,iKAGUA,EAAWE,G,yGACrBvB,KAAKc,UAAL,UACFd,KAAKsB,eADH,YACqBD,EADrB,sBAC4CE,EAD5C,e,sKAKa9C,G,yGACbuB,KAAKc,UAAL,UAAkBd,KAAKC,QAAvB,YAAkCxB,EAAlC,kB,gIAjGP,IAAKuB,KAAKH,YAAa,MAAM,IAAI2B,MAAM,gCACvC,MAAO,CACLC,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAY3B,KAAKH,gB,8BAMpC,OAAOG,KAAK4B,uBAAyB,6C,aAG3BxB,GACVJ,KAAK4B,sBAAwBxB,I,qCAI7B,OAAOJ,KAAKC,QAAL,iB,gCAmFI,QAAIL,G,iCC5GnB,0GAAMiC,EAAa,SAACvB,EAAMwB,GAAS,IAE/BC,EAOEzB,EAPFyB,YACAC,EAME1B,EANF0B,SACAC,EAKE3B,EALF2B,SAJ+B,EAS7B3B,EAJF7B,eAL+B,MAKrB,GALqB,IAS7B6B,EAHF5B,kBAN+B,MAMlB,GANkB,IAS7B4B,EAFFhC,gBAP+B,MAOpB,GAPoB,IAS7BgC,EADF9B,QAGF,MAAO,CACL,CACEsD,KAAMA,EACNrD,UACAC,aACAJ,WACAE,aAjB6B,MAQrB,GARqB,EAkB7B0D,eAAgB,SAChBC,mBAAoB,SACpBC,KAAM,WACNC,QAAQ,EACRN,cACAC,WACAC,WACAK,uBAAuB,EACvBC,0BAA0B,KAK1BC,EAAgB,SAAAvD,GACpB,OACEA,KACEA,EAAOR,WACPQ,EAAOP,cACPO,EAAOX,YACPW,EAAOT,SAIPiE,EAAgB,WAAiC,IAAhCxD,EAAgC,uDAAvB,GAAIyD,EAAmB,uDAAP,GACxCC,EAAeC,OAAOC,KAAK5D,GAAQ6D,OACnCC,EAAkBH,OAAOC,KAAKH,GAAWI,OAE/C,SAAKH,IAAiBI,KAKpB9D,EAAOR,UAAYiE,EAAUjE,SAC7BQ,EAAOR,UAAYiE,EAAUjE,SAC7BQ,EAAOP,aAAegE,EAAUhE,YAChCO,EAAOX,WAAaoE,EAAUpE,UAC9BW,EAAOT,UAAYkE,EAAUlE,W,iCCtDjC,iGAWMwE,EAAkB,SAAAC,GAGtB,OAAOA,GAAWA,EAAQA,SAAWA,EAAQA,QAAQC,MAFpC,SAAAC,GAAC,OAAiB,IAAbA,EAAEd,WAKpBR,EAAa,SAACuB,EAAW5E,EAASF,EAAUG,EAASC,GACzD,IAAIuE,EAAU,GACd,GAAIG,EAAUC,yBAA0B,CACtCzD,IAAeK,QAAUmD,EAAUxB,sBACnC,IAAM0B,EAAU1D,IAAe2D,mBAC7B/E,EACAF,EACAG,EACAC,GAEI4B,EAAO,CACX9B,UACAF,WACAG,UACAC,aACAqD,YAAauB,EACbtB,SAAUsB,EACVrB,SAAUqB,GAGZ,GADAL,EAAUO,IAAkClD,EAAM5B,IAC7C8D,EAAcS,EAAQ,GAAIG,GAC7B,OAIJ,OAAOH,GAGHT,EAAgB,SAACvD,EAAQmE,GAC7B,OAAIA,EAAUC,yBACLG,IAAqCvE,KAGrCA,GAGLwE,EAAa,SAACC,EAAUT,GAK5BS,EAJe,CACbtB,KAAM,cACNa,aAKEU,EAAmB,WAUpB,IATHV,EASG,uDATO,GACVW,EAQG,uCAPHC,EAOG,uCANHC,EAMG,uCALHV,EAKG,2KAEH,IAAKA,EAAUC,yBACb,OAAO,EAGT,IAAMU,EAAmBH,IAAoBX,GAAWW,EAGxD,GAAIG,EACF,OAAO,EAIT,IAAKD,IAAoBA,EAAgBhB,OACvC,OAAO,EACF,IAAKG,EAAQH,SAAWe,EAE7B,OAAO,EAGT,IAAMG,EAAYF,EAAgB,GAE9BG,EAAShB,EAAQiB,KACnBV,IAAqCW,UAAKC,EAAWJ,IAGvD,OAAQC,GAGK,SAAS/E,IAKhB,6DAAJ,GAJFV,EAIM,EAJNA,QACAF,EAGM,EAHNA,SACAG,EAEM,EAFNA,QACAC,EACM,EADNA,WAGMuE,EAAUoB,aAAY,SAAAC,GAAK,OAAIA,GAASA,EAAMrB,WAC9CW,EAAkBW,YAAYtB,GAC9BS,EAAWc,cAJX,EAMqBC,qBAAWC,KAA9BtB,iBANF,MAMc,GANd,EAQAS,EAAeb,EAAgBC,GAC/Ba,EACJjC,EAAWuB,EAAW5E,EAASF,EAAUG,EAASC,IAAe,GAanE,GAZ2BiF,EACzBV,EAAQA,QACRW,EACAC,EACAC,EACAV,EACA5E,EACAF,EACAG,EACAC,GAIA+E,EAAWC,EAAUI,QAChB,GAAItB,EAAcqB,EAAcT,GACrC,OAAOS","file":"ViewerRouting.bundle.0104e6430922500d36c7.js","sourcesContent":["import { useLocation } from 'react-router-dom';\r\n\r\n/**\r\n * hook that builds on useLocation to parse\r\n * the query string for you.\r\n *\r\n * @name useQuery\r\n */\r\nexport default function() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { utils, user } from '@ohif/core';\r\n//\r\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData';\r\nimport useServer from '../customHooks/useServer';\r\nimport useQuery from '../customHooks/useQuery';\r\nconst { urlUtil: UrlUtil } = utils;\r\n\r\n/**\r\n * Get array of seriesUIDs from param or from queryString\r\n * @param {*} seriesInstanceUIDs\r\n * @param {*} location\r\n */\r\nconst getSeriesInstanceUIDs = (seriesInstanceUIDs, routeLocation) => {\r\n  const queryFilters = UrlUtil.queryString.getQueryFilters(routeLocation);\r\n  const querySeriesUIDs = queryFilters && queryFilters['seriesInstanceUID'];\r\n  const _seriesInstanceUIDs = seriesInstanceUIDs || querySeriesUIDs;\r\n\r\n  return UrlUtil.paramString.parseParam(_seriesInstanceUIDs);\r\n};\r\n\r\nfunction ViewerRouting({ match: routeMatch, location: routeLocation }) {\r\n  const {\r\n    project,\r\n    location,\r\n    dataset,\r\n    dicomStore,\r\n    studyInstanceUIDs,\r\n    seriesInstanceUIDs,\r\n  } = routeMatch.params;\r\n\r\n  // Set the user's default authToken for outbound DICOMWeb requests.\r\n  // Is only applied if target server does not set `requestOptions` property.\r\n  //\r\n  // See: `getAuthorizationHeaders.js`\r\n  let query = useQuery();\r\n  const authToken = query.get('token');\r\n\r\n  if (authToken) {\r\n    user.getAccessToken = () => authToken;\r\n  }\r\n\r\n  const server = useServer({ project, location, dataset, dicomStore });\r\n  const studyUIDs = UrlUtil.paramString.parseParam(studyInstanceUIDs);\r\n  const seriesUIDs = getSeriesInstanceUIDs(seriesInstanceUIDs, routeLocation);\r\n\r\n  if (server && studyUIDs) {\r\n    return (\r\n      <ConnectedViewerRetrieveStudyData\r\n        studyInstanceUIDs={studyUIDs}\r\n        seriesInstanceUIDs={seriesUIDs}\r\n      />\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nViewerRouting.propTypes = {\r\n  match: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      studyInstanceUIDs: PropTypes.string.isRequired,\r\n      seriesInstanceUIDs: PropTypes.string,\r\n      dataset: PropTypes.string,\r\n      dicomStore: PropTypes.string,\r\n      location: PropTypes.string,\r\n      project: PropTypes.string,\r\n    }),\r\n  }),\r\n  location: PropTypes.any,\r\n};\r\n\r\nexport default ViewerRouting;\r\n","class GoogleCloudApi {\r\n  setAccessToken(accessToken) {\r\n    if (!accessToken) console.error('Access token is empty');\r\n    this.accessToken = accessToken;\r\n  }\r\n\r\n  get fetchConfig() {\r\n    if (!this.accessToken) throw new Error('OIDC access_token is not set');\r\n    return {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: 'Bearer ' + this.accessToken,\r\n      },\r\n    };\r\n  }\r\n\r\n  get urlBase() {\r\n    return this.healthcareApiEndpoint || 'https://healthcare.googleapis.com/v1beta1';\r\n  }\r\n\r\n  set urlBase(url) {\r\n    this.healthcareApiEndpoint = url;\r\n  }\r\n\r\n  get urlBaseProject() {\r\n    return this.urlBase + `/projects`;\r\n  }\r\n\r\n  getUrlBaseDicomWeb(project, location, dataset, dicomStore) {\r\n    return (\r\n      this.urlBase +\r\n      `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}/dicomWeb`\r\n    );\r\n  }\r\n\r\n  getUrlPath(project, location, dataset, dicomStore) {\r\n    `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}`;\r\n  }\r\n\r\n  async doRequest(urlStr, config = {}, params = {}) {\r\n    const url = new URL(urlStr);\r\n    let data = null;\r\n    url.search = new URLSearchParams(params);\r\n\r\n    try {\r\n      const response = await fetch(url, { ...this.fetchConfig, config });\r\n      try {\r\n        data = await response.json();\r\n      } catch (err) {}\r\n      if (response.status >= 200 && response.status < 300 && data != null) {\r\n        if (data.nextPageToken != null) {\r\n          params.pageToken = data.nextPageToken;\r\n          let subPage = await this.doRequest(urlStr, config, params);\r\n          for (let key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n              data[key] = data[key].concat(subPage.data[key]);\r\n            }\r\n          }\r\n        }\r\n        return {\r\n          isError: false,\r\n          status: response.status,\r\n          data,\r\n        };\r\n      } else {\r\n        return {\r\n          isError: true,\r\n          status: response.status,\r\n          message:\r\n            (data && data.error && data.error.message) || 'Unknown error',\r\n        };\r\n      }\r\n    } catch (err) {\r\n      if (data && data.error) {\r\n        return {\r\n          isError: true,\r\n          status: err.status,\r\n          message: err.response.data.error.message || 'Unspecified error',\r\n        };\r\n      }\r\n      return {\r\n        isError: true,\r\n        message: (err && err.message) || 'Oops! Something went wrong',\r\n      };\r\n    }\r\n  }\r\n\r\n  async loadProjects() {\r\n    return this.doRequest(\r\n      'https://cloudresourcemanager.googleapis.com/v1/projects'\r\n    );\r\n  }\r\n\r\n  async loadLocations(projectId) {\r\n    return this.doRequest(`${this.urlBaseProject}/${projectId}/locations`);\r\n  }\r\n\r\n  async loadDatasets(projectId, locationId) {\r\n    return this.doRequest(\r\n      `${this.urlBaseProject}/${projectId}/locations/${locationId}/datasets`\r\n    );\r\n  }\r\n\r\n  async loadDicomStores(dataset) {\r\n    return this.doRequest(`${this.urlBase}/${dataset}/dicomStores`);\r\n  }\r\n}\r\n\r\nexport default new GoogleCloudApi();\r\n","const getServers = (data, name) => {\r\n  const {\r\n    wadoUriRoot,\r\n    qidoRoot,\r\n    wadoRoot,\r\n    dataset = '',\r\n    dicomStore = '',\r\n    location = '',\r\n    project = '',\r\n  } = data;\r\n\r\n  return [\r\n    {\r\n      name: name,\r\n      dataset,\r\n      dicomStore,\r\n      location,\r\n      project,\r\n      imageRendering: 'wadors',\r\n      thumbnailRendering: 'wadors',\r\n      type: 'dicomWeb',\r\n      active: true,\r\n      wadoUriRoot,\r\n      qidoRoot,\r\n      wadoRoot,\r\n      supportsFuzzyMatching: false,\r\n      qidoSupportsIncludeField: false,\r\n    },\r\n  ];\r\n};\r\n\r\nconst isValidServer = server => {\r\n  return (\r\n    server &&\r\n    !!server.dataset &&\r\n    !!server.dicomStore &&\r\n    !!server.location &&\r\n    !!server.project\r\n  );\r\n};\r\n\r\nconst isEqualServer = (server = {}, toCompare = {}) => {\r\n  const serverLength = Object.keys(server).length;\r\n  const toCompareLength = Object.keys(toCompare).length;\r\n\r\n  if (!serverLength || !toCompareLength) {\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    server.dataset === toCompare.dataset &&\r\n    server.dataset === toCompare.dataset &&\r\n    server.dicomStore === toCompare.dicomStore &&\r\n    server.location === toCompare.location &&\r\n    server.project === toCompare.project\r\n  );\r\n};\r\n\r\nexport { getServers, isValidServer, isEqualServer };\r\n","import React, { useContext } from 'react';\r\nimport GoogleCloudApi from '../googleCloud/api/GoogleCloudApi';\r\nimport usePrevious from './usePrevious';\r\n\r\nimport * as GoogleCloudUtilServers from '../googleCloud/utils/getServers';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport isEqual from 'lodash.isequal';\r\n\r\n// Contexts\r\nimport AppContext from '../context/AppContext';\r\n\r\nconst getActiveServer = servers => {\r\n  const isActive = a => a.active === true;\r\n\r\n  return servers && servers.servers && servers.servers.find(isActive);\r\n};\r\n\r\nconst getServers = (appConfig, project, location, dataset, dicomStore) => {\r\n  let servers = [];\r\n  if (appConfig.enableGoogleCloudAdapter) {\r\n    GoogleCloudApi.urlBase = appConfig.healthcareApiEndpoint;\r\n    const pathUrl = GoogleCloudApi.getUrlBaseDicomWeb(\r\n      project,\r\n      location,\r\n      dataset,\r\n      dicomStore\r\n    );\r\n    const data = {\r\n      project,\r\n      location,\r\n      dataset,\r\n      dicomStore,\r\n      wadoUriRoot: pathUrl,\r\n      qidoRoot: pathUrl,\r\n      wadoRoot: pathUrl,\r\n    };\r\n    servers = GoogleCloudUtilServers.getServers(data, dicomStore);\r\n    if (!isValidServer(servers[0], appConfig)) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  return servers;\r\n};\r\n\r\nconst isValidServer = (server, appConfig) => {\r\n  if (appConfig.enableGoogleCloudAdapter) {\r\n    return GoogleCloudUtilServers.isValidServer(server);\r\n  }\r\n\r\n  return !!server;\r\n};\r\n\r\nconst setServers = (dispatch, servers) => {\r\n  const action = {\r\n    type: 'SET_SERVERS',\r\n    servers,\r\n  };\r\n  dispatch(action);\r\n};\r\n\r\nconst useServerFromUrl = (\r\n  servers = [],\r\n  previousServers,\r\n  activeServer,\r\n  urlBasedServers,\r\n  appConfig,\r\n  project,\r\n  location,\r\n  dataset,\r\n  dicomStore\r\n) => {\r\n  // update state from url available only when gcloud on\r\n  if (!appConfig.enableGoogleCloudAdapter) {\r\n    return false;\r\n  }\r\n\r\n  const serverHasChanged = previousServers !== servers && previousServers;\r\n\r\n  // do not update from url. use state instead.\r\n  if (serverHasChanged) {\r\n    return false;\r\n  }\r\n\r\n  // if no valid urlbased servers\r\n  if (!urlBasedServers || !urlBasedServers.length) {\r\n    return false;\r\n  } else if (!servers.length || !activeServer) {\r\n    // no current valid server\r\n    return true;\r\n  }\r\n\r\n  const newServer = urlBasedServers[0];\r\n\r\n  let exists = servers.some(\r\n    GoogleCloudUtilServers.isEqualServer.bind(undefined, newServer)\r\n  );\r\n\r\n  return !exists;\r\n};\r\n\r\nexport default function useServer({\r\n  project,\r\n  location,\r\n  dataset,\r\n  dicomStore,\r\n} = {}) {\r\n  // Hooks\r\n  const servers = useSelector(state => state && state.servers);\r\n  const previousServers = usePrevious(servers);\r\n  const dispatch = useDispatch();\r\n\r\n  const { appConfig = {} } = useContext(AppContext);\r\n\r\n  const activeServer = getActiveServer(servers);\r\n  const urlBasedServers =\r\n    getServers(appConfig, project, location, dataset, dicomStore) || [];\r\n  const shouldUpdateServer = useServerFromUrl(\r\n    servers.servers,\r\n    previousServers,\r\n    activeServer,\r\n    urlBasedServers,\r\n    appConfig,\r\n    project,\r\n    location,\r\n    dataset,\r\n    dicomStore\r\n  );\r\n\r\n  if (shouldUpdateServer) {\r\n    setServers(dispatch, urlBasedServers);\r\n  } else if (isValidServer(activeServer, appConfig)) {\r\n    return activeServer;\r\n  }\r\n}\r\n"],"sourceRoot":""}