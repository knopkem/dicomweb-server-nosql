{"version":3,"sources":["webpack:///./connectedComponents/ViewerLocalFileData.js","webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js","webpack:///./lib/localFileLoaders/fileLoader.js","webpack:///./lib/localFileLoaders/pdfFileLoader.js","webpack:///./lib/localFileLoaders/dicomFileLoader.js","webpack:///./lib/localFileLoaders/fileLoaderService.js","webpack:///./lib/filesToStudies.js"],"names":["OHIFStudyMetadata","metadata","studyMetadataManager","utils","dropZoneLinkDialog","onDrop","i18n","dir","noDrag","getRootProps","getInputProps","className","webkitdirectory","mozdirectory","ViewerLocalFileData","studies","loading","error","purge","updatedStudies","map","study","studyMetadata","StudyInstanceUID","sopClassHandlerModules","extensionManager","modules","displaySets","createDisplaySets","forEachDisplaySet","displayset","localFile","add","setState","acceptedFiles","filesToStudies","updateStudies","this","state","JSON","stringify","noClick","style","width","height","studyInstanceUIDs","a","props","t","linksDialogMessage","Component","PropTypes","array","withTranslation","scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","updateButtonGroups","panelModules","MODULE_TYPES","PANEL","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","menuOptionEntry","value","target","icon","bottomLabel","label","unshift","prevProps","activeContextsChanged","prevStudies","studiesUpdated","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","padding","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","_getCustomButtonComponent","CustomComponent","activeButtonsIds","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","document","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","any","modal","withModal","withDialog","withAppContext","setActiveViewportSpecificData","ConnectedStudyBrowser","stackLoadingProgressMap","progress","studiesWithLoadingData","thumbnails","displaySetInstanceUID","stackId","stackProgressData","stackPercentComplete","percentComplete","onThumbnailClick","displaySet","isArray","reduce","all","current","currentDisplaySet","concat","ds","findDisplaySetByUID","isDerived","Modality","getSourceDisplaySet","Error","StudyBrowser","ViewportPane","children","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","collect","highlighted","hovered","classNames","ref","data-cy","propTypes","node","number","loadAndCacheDerivedDisplaySets","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","isStudyLoaded","rowSize","colSize","snackbar","useSnackbarContext","useEffect","promise","catch","show","message","autoClose","ViewportPanes","React","useMemo","pluginName","ViewportComponent","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","supportsDrop","object","defaultProps","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","fromSideClass","styles","maxWidth","marginRight","isOpen","Number","parseInt","UIModalService","servicesManager","services","ErrorBoundaryDialog","fallbackComponent","role","onError","componentStack","useState","open","setOpen","s","name","classnames","opened","Viewer","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","dismissAll","timepointApi","measurementApi","currentTimepointId","_mapStudiesToThumbnails","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","AppContext","appContext","ConnectedHeader","linkText","appConfig","showStudyList","undefined","linkPath","createLogoComponentFn","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","shape","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","images","getImageId","wadoRoot","imageId","altImageText","imageIndex","Math","floor","setTimepoints","setMeasurements","getActiveServer","servers","ConnectedViewer","FileLoader","file","image","dataset","PDFFileLoader","cornerstoneWADOImageLoader","wadouri","loadFileRequest","getDefaultStudy","StudyTime","AccessionNumber","ReferringPhysicianName","PatientName","PatientBirthdate","PatientSex","StudyId","StudyDescription","SeriesInstanceUID","instances","SOPInstanceUID","SOPClassUID","Rows","Columns","NumberOfFrames","isLocalFile","metadataProvider","cornerstone","DICOMFileLoader","dicomData","dcmjs","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","addInstance","_meta","namifyDataset","meta","e","console","getStudyFromDataset","PatientBirthDate","StudyID","instance","url","FileLoaderService","fileType","loader","getLoader","groupBy","list","groupByKey","listKey","nonKeyCounter","acc","obj","studyGroup","seriesGrouped","fileManager","loadFile","getDataset","getStudies","processFile","fileLoaderService","addFile","files","processFilesPromises","groupSeries","flat"],"mappings":"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","file":"ViewerLocalFileData.bundle.3906944d8bccd2dd8578.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { metadata, utils } from '@ohif/core';\r\n\r\nimport ConnectedViewer from './ConnectedViewer.js';\r\nimport PropTypes from 'prop-types';\r\nimport { extensionManager } from './../App.js';\r\nimport Dropzone from 'react-dropzone';\r\nimport filesToStudies from '../lib/filesToStudies';\r\nimport './ViewerLocalFileData.css';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nconst { OHIFStudyMetadata } = metadata;\r\nconst { studyMetadataManager } = utils;\r\n\r\nconst dropZoneLinkDialog = (onDrop, i18n, dir) => {\r\n  return (\r\n    <Dropzone onDrop={onDrop} noDrag>\r\n      {({ getRootProps, getInputProps }) => (\r\n        <span {...getRootProps()} className=\"link-dialog\">\r\n          {dir ? (\r\n            <span>\r\n              {i18n('Load folders')}\r\n              <input\r\n                {...getInputProps()}\r\n                webkitdirectory=\"true\"\r\n                mozdirectory=\"true\"\r\n              />\r\n            </span>\r\n          ) : (\r\n            <span>\r\n              {i18n('Load files')}\r\n              <input {...getInputProps()} />\r\n            </span>\r\n          )}\r\n        </span>\r\n      )}\r\n    </Dropzone>\r\n  );\r\n};\r\n\r\nconst linksDialogMessage = (onDrop, i18n) => {\r\n  return (\r\n    <>\r\n      {i18n('Or click to ')}\r\n      {dropZoneLinkDialog(onDrop, i18n)}\r\n      {i18n(' or ')}\r\n      {dropZoneLinkDialog(onDrop, i18n, true)}\r\n      {i18n(' from dialog')}\r\n    </>\r\n  );\r\n};\r\n\r\nclass ViewerLocalFileData extends Component {\r\n  static propTypes = {\r\n    studies: PropTypes.array,\r\n  };\r\n\r\n  state = {\r\n    studies: null,\r\n    loading: false,\r\n    error: null,\r\n  };\r\n\r\n  updateStudies = studies => {\r\n    // Render the viewer when the data is ready\r\n    studyMetadataManager.purge();\r\n\r\n    // Map studies to new format, update metadata manager?\r\n    const updatedStudies = studies.map(study => {\r\n      const studyMetadata = new OHIFStudyMetadata(\r\n        study,\r\n        study.StudyInstanceUID\r\n      );\r\n      const sopClassHandlerModules =\r\n        extensionManager.modules['sopClassHandlerModule'];\r\n\r\n      study.displaySets =\r\n        study.displaySets ||\r\n        studyMetadata.createDisplaySets(sopClassHandlerModules);\r\n\r\n      studyMetadata.forEachDisplaySet(displayset => {\r\n        displayset.localFile = true;\r\n      });\r\n\r\n      studyMetadataManager.add(studyMetadata);\r\n\r\n      return study;\r\n    });\r\n\r\n    this.setState({\r\n      studies: updatedStudies,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const onDrop = async acceptedFiles => {\r\n      this.setState({ loading: true });\r\n\r\n      const studies = await filesToStudies(acceptedFiles);\r\n      const updatedStudies = this.updateStudies(studies);\r\n\r\n      if (!updatedStudies) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ studies: updatedStudies, loading: false });\r\n    };\r\n\r\n    if (this.state.error) {\r\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\r\n    }\r\n\r\n    return (\r\n      <Dropzone onDrop={onDrop} noClick>\r\n        {({ getRootProps, getInputProps }) => (\r\n          <div {...getRootProps()} style={{ width: '100%', height: '100%' }}>\r\n            {this.state.studies ? (\r\n              <ConnectedViewer\r\n                studies={this.state.studies}\r\n                studyInstanceUIDs={\r\n                  this.state.studies &&\r\n                  this.state.studies.map(a => a.StudyInstanceUID)\r\n                }\r\n              />\r\n            ) : (\r\n              <div className={'drag-drop-instructions'}>\r\n                <div className={'drag-drop-contents'}>\r\n                  {this.state.loading ? (\r\n                    <h3>{this.props.t('Loading...')}</h3>\r\n                  ) : (\r\n                    <>\r\n                      <h3>\r\n                        {this.props.t(\r\n                          'Drag and Drop DICOM files here to load them in the Viewer'\r\n                        )}\r\n                      </h3>\r\n                      <h4>{linksDialogMessage(onDrop, this.props.t)}</h4>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation('Common')(ViewerLocalFileData);\r\n","import { connect } from 'react-redux';\r\nimport { CineDialog } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport csTools from 'cornerstone-tools';\r\nimport { commandsManager } from './../App.js';\r\n// Our target output kills the `as` and \"import\" throws a keyword error\r\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nconst toolImport = csTools.import;\r\nconst scrollToIndex = toolImport('util/scrollToIndex');\r\nconst { setViewportSpecificData } = OHIF.redux.actions;\r\n\r\n// Why do I need or care about any of this info?\r\n// A dispatch action should be able to pull this at the time of an event?\r\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\r\nconst mapStateToProps = state => {\r\n  // Get activeViewport's `cine` and `stack`\r\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\r\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\r\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\r\n\r\n  const cineData = cine || {\r\n    isPlaying: false,\r\n    cineFrameRate: 24,\r\n  };\r\n\r\n  // New props we're creating?\r\n  return {\r\n    activeEnabledElement: dom,\r\n    activeViewportCineData: cineData,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\r\n  const {\r\n    activeEnabledElement,\r\n    activeViewportCineData,\r\n    activeViewportIndex,\r\n  } = propsFromState;\r\n\r\n  return {\r\n    cineFrameRate: activeViewportCineData.cineFrameRate,\r\n    isPlaying: activeViewportCineData.isPlaying,\r\n    onPlayPauseChanged: isPlaying => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.isPlaying = !cine.isPlaying;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onFrameRateChanged: frameRate => {\r\n      const cine = cloneDeep(activeViewportCineData);\r\n      cine.cineFrameRate = frameRate;\r\n\r\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\r\n        cine,\r\n      });\r\n    },\r\n    onClickNextButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\r\n      if (currentImageIdIndex >= imageIds.length - 1) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\r\n    },\r\n    onClickBackButton: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const { currentImageIdIndex } = stackData.data[0];\r\n      if (currentImageIdIndex === 0) return;\r\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\r\n    },\r\n    onClickSkipToStart: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      scrollToIndex(activeEnabledElement, 0);\r\n    },\r\n    onClickSkipToEnd: () => {\r\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\r\n      if (!stackData || !stackData.data || !stackData.data.length) return;\r\n      const lastIndex = stackData.data[0].imageIds.length - 1;\r\n      scrollToIndex(activeEnabledElement, lastIndex);\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedCineDialog = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(CineDialog);\r\n\r\nexport default ConnectedCineDialog;\r\n","import { LayoutButton } from '@ohif/ui';\r\nimport OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\n\r\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentLayout: state.viewports.layout,\r\n    activeViewportIndex: state.viewports.activeViewportIndex,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // TODO: Change if layout switched becomes more complex\r\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\r\n      const viewports = [];\r\n      const numRows = selectedCell.row + 1;\r\n      const numColumns = selectedCell.col + 1;\r\n      const numViewports = numRows * numColumns;\r\n\r\n      for (let i = 0; i < numViewports; i++) {\r\n        // Hacky way to allow users to exit MPR \"mode\"\r\n        const viewport = currentLayout.viewports[i];\r\n        let plugin = viewport && viewport.plugin;\r\n        if (viewport && viewport.vtk) {\r\n          plugin = 'cornerstone';\r\n        }\r\n\r\n        viewports.push({\r\n          plugin,\r\n        });\r\n      }\r\n      const layout = {\r\n        numRows,\r\n        numColumns,\r\n        viewports,\r\n      };\r\n\r\n      const maxActiveIndex = numViewports - 1;\r\n      if (activeViewportIndex > maxActiveIndex) {\r\n        dispatch(setViewportActive(0));\r\n      }\r\n\r\n      dispatch(setLayout(layout));\r\n    },\r\n  };\r\n};\r\n\r\nconst mergeProps = (propsFromState, propsFromDispatch) => {\r\n  const onChangeFromDispatch = propsFromDispatch.onChange;\r\n  const { currentLayout, activeViewportIndex } = propsFromState;\r\n\r\n  return {\r\n    onChange: selectedCell =>\r\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\r\n  };\r\n};\r\n\r\nconst ConnectedLayoutButton = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(LayoutButton);\r\n\r\nexport default ConnectedLayoutButton;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport {\r\n  ExpandableToolMenu,\r\n  RoundedButtonGroup,\r\n  ToolbarButton,\r\n  withModal,\r\n  withDialog,\r\n} from '@ohif/ui';\r\n\r\nimport './ToolbarRow.css';\r\nimport { commandsManager, extensionManager } from './../App.js';\r\n\r\nimport ConnectedCineDialog from './ConnectedCineDialog';\r\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\r\nimport { withAppContext } from '../context/AppContext';\r\n\r\nclass ToolbarRow extends Component {\r\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\r\n  // closed if selected is null/undefined\r\n  static propTypes = {\r\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\r\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\r\n    selectedLeftSidePanel: PropTypes.string.isRequired,\r\n    selectedRightSidePanel: PropTypes.string.isRequired,\r\n    handleSidePanelChange: PropTypes.func.isRequired,\r\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    studies: PropTypes.array,\r\n    t: PropTypes.func.isRequired,\r\n    // NOTE: withDialog, withModal HOCs\r\n    dialog: PropTypes.any,\r\n    modal: PropTypes.any,\r\n  };\r\n\r\n  static defaultProps = {\r\n    studies: [],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\r\n    // TODO:\r\n    // If it's a tool that can be active... Mark it as active?\r\n    // - Tools that are on/off?\r\n    // - Tools that can be bound to multiple buttons?\r\n\r\n    // Normal ToolbarButtons...\r\n    // Just how high do we need to hoist this state?\r\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\r\n    this.state = {\r\n      toolbarButtons: toolbarButtonDefinitions,\r\n      activeButtons: [],\r\n    };\r\n\r\n    this.seriesPerStudyCount = [];\r\n\r\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\r\n\r\n    this.updateButtonGroups();\r\n  }\r\n\r\n  updateButtonGroups() {\r\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    this.buttonGroups = {\r\n      left: [],\r\n      right: [],\r\n    };\r\n\r\n    // ~ FIND MENU OPTIONS\r\n    panelModules.forEach(panelExtension => {\r\n      const panelModule = panelExtension.module;\r\n      const defaultContexts = Array.from(panelModule.defaultContext);\r\n\r\n      panelModule.menuOptions.forEach(menuOption => {\r\n        const contexts = Array.from(menuOption.context || defaultContexts);\r\n        const hasActiveContext = this.props.activeContexts.some(actx =>\r\n          contexts.includes(actx)\r\n        );\r\n\r\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\r\n        // Note: This does not cleanly handle `studies` prop updating with panel open\r\n        const isDisabled =\r\n          typeof menuOption.isDisabled === 'function' &&\r\n          menuOption.isDisabled(this.props.studies);\r\n\r\n        if (hasActiveContext && !isDisabled) {\r\n          const menuOptionEntry = {\r\n            value: menuOption.target,\r\n            icon: menuOption.icon,\r\n            bottomLabel: menuOption.label,\r\n          };\r\n          const from = menuOption.from || 'right';\r\n\r\n          this.buttonGroups[from].push(menuOptionEntry);\r\n        }\r\n      });\r\n    });\r\n\r\n    // TODO: This should come from extensions, instead of being baked in\r\n    this.buttonGroups.left.unshift({\r\n      value: 'studies',\r\n      icon: 'th-large',\r\n      bottomLabel: this.props.t('Series'),\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const activeContextsChanged =\r\n      prevProps.activeContexts !== this.props.activeContexts;\r\n\r\n    const prevStudies = prevProps.studies;\r\n    const studies = this.props.studies;\r\n    const seriesPerStudyCount = this.seriesPerStudyCount;\r\n\r\n    let studiesUpdated = false;\r\n\r\n    if (prevStudies.length !== studies.length) {\r\n      studiesUpdated = true;\r\n    } else {\r\n      for (let i = 0; i < studies.length; i++) {\r\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\r\n          seriesPerStudyCount[i] = studies[i].series.length;\r\n\r\n          studiesUpdated = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (studiesUpdated) {\r\n      this.updateButtonGroups();\r\n    }\r\n\r\n    if (activeContextsChanged) {\r\n      this.setState(\r\n        {\r\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\r\n        },\r\n        this.closeCineDialogIfNotApplicable\r\n      );\r\n    }\r\n  }\r\n\r\n  closeCineDialogIfNotApplicable = () => {\r\n    const { dialog } = this.props;\r\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\r\n    if (dialogId) {\r\n      const cineButtonPresent = toolbarButtons.find(\r\n        button => button.options && button.options.behavior === 'CINE'\r\n      );\r\n      if (!cineButtonPresent) {\r\n        dialog.dismiss({ id: dialogId });\r\n        activeButtons = activeButtons.filter(\r\n          button => button.options && button.options.behavior !== 'CINE'\r\n        );\r\n        this.setState({ dialogId: null, activeButtons });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const buttonComponents = _getButtonComponents.call(\r\n      this,\r\n      this.state.toolbarButtons,\r\n      this.state.activeButtons\r\n    );\r\n\r\n    const onPress = (side, value) => {\r\n      this.props.handleSidePanelChange(side, value);\r\n    };\r\n    const onPressLeft = onPress.bind(this, 'left');\r\n    const onPressRight = onPress.bind(this, 'right');\r\n\r\n    return (\r\n      <>\r\n        <div className=\"ToolbarRow\">\r\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\r\n            <RoundedButtonGroup\r\n              options={this.buttonGroups.left}\r\n              value={this.props.selectedLeftSidePanel || ''}\r\n              onValueChanged={onPressLeft}\r\n            />\r\n          </div>\r\n          {buttonComponents}\r\n          <ConnectedLayoutButton />\r\n          <div\r\n            className=\"pull-right m-t-1 rm-x-1\"\r\n            style={{ marginLeft: 'auto' }}\r\n          >\r\n            {this.buttonGroups.right.length && (\r\n              <RoundedButtonGroup\r\n                options={this.buttonGroups.right}\r\n                value={this.props.selectedRightSidePanel || ''}\r\n                onValueChanged={onPressRight}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getCustomButtonComponent(button, activeButtons) {\r\n  const CustomComponent = button.CustomComponent;\r\n  const isValidComponent = typeof CustomComponent === 'function';\r\n\r\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\r\n  if (isValidComponent) {\r\n    const parentContext = this;\r\n    const activeButtonsIds = activeButtons.map(button => button.id);\r\n    const isActive = activeButtonsIds.includes(button.id);\r\n\r\n    return (\r\n      <CustomComponent\r\n        parentContext={parentContext}\r\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\r\n        button={button}\r\n        key={button.id}\r\n        activeButtons={activeButtonsIds}\r\n        isActive={isActive}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction _getExpandableButtonComponent(button, activeButtons) {\r\n  // Iterate over button definitions and update `onClick` behavior\r\n  let activeCommand;\r\n  const childButtons = button.buttons.map(childButton => {\r\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\r\n\r\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\r\n      activeCommand = childButton.id;\r\n    }\r\n\r\n    return childButton;\r\n  });\r\n\r\n  return (\r\n    <ExpandableToolMenu\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      buttons={childButtons}\r\n      activeCommand={activeCommand}\r\n    />\r\n  );\r\n}\r\n\r\nfunction _getDefaultButtonComponent(button, activeButtons) {\r\n  return (\r\n    <ToolbarButton\r\n      key={button.id}\r\n      label={button.label}\r\n      icon={button.icon}\r\n      onClick={_handleToolbarButtonClick.bind(this, button)}\r\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\r\n    />\r\n  );\r\n}\r\n/**\r\n * Determine which extension buttons should be showing, if they're\r\n * active, and what their onClick behavior should be.\r\n */\r\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\r\n  const _this = this;\r\n  return toolbarButtons.map(button => {\r\n    const hasCustomComponent = button.CustomComponent;\r\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\r\n\r\n    if (hasCustomComponent) {\r\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    if (hasNestedButtonDefinitions) {\r\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\r\n    }\r\n\r\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\r\n  });\r\n}\r\n\r\n/**\r\n * TODO: DEPRECATE\r\n * This is used exclusively in `extensions/cornerstone/src`\r\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\r\n *\r\n * A handy way for us to handle different button types. IE. firing commands for\r\n * buttons, or initiation built in behavior.\r\n *\r\n * @param {*} button\r\n * @param {*} evt\r\n * @param {*} props\r\n */\r\nfunction _handleToolbarButtonClick(button, evt, props) {\r\n  const { activeButtons } = this.state;\r\n\r\n  if (button.commandName) {\r\n    const options = Object.assign({ evt }, button.commandOptions);\r\n    commandsManager.runCommand(button.commandName, options);\r\n  }\r\n\r\n  // TODO: Use Types ENUM\r\n  // TODO: We can update this to be a `getter` on the extension to query\r\n  //       For the active tools after we apply our updates?\r\n  if (button.type === 'setToolActive') {\r\n    const toggables = activeButtons.filter(\r\n      ({ options }) => options && !options.togglable\r\n    );\r\n    this.setState({ activeButtons: [...toggables, button] });\r\n  } else if (button.type === 'builtIn') {\r\n    this._handleBuiltIn(button);\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _getVisibleToolbarButtons() {\r\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\r\n  const toolbarButtonDefinitions = [];\r\n\r\n  toolbarModules.forEach(extension => {\r\n    const { definitions, defaultContext } = extension.module;\r\n    definitions.forEach(definition => {\r\n      const context = definition.context || defaultContext;\r\n\r\n      if (this.props.activeContexts.includes(context)) {\r\n        toolbarButtonDefinitions.push(definition);\r\n      }\r\n    });\r\n  });\r\n\r\n  return toolbarButtonDefinitions;\r\n}\r\n\r\nfunction _handleBuiltIn(button) {\r\n  /* TODO: Keep cine button active until its unselected. */\r\n  const { dialog, t } = this.props;\r\n  const { dialogId } = this.state;\r\n  const { id, options } = button;\r\n\r\n  if (options.behavior === 'CINE') {\r\n    if (dialogId) {\r\n      dialog.dismiss({ id: dialogId });\r\n      this.setState(state => ({\r\n        dialogId: null,\r\n        activeButtons: [\r\n          ...state.activeButtons.filter(button => button.id !== id),\r\n        ],\r\n      }));\r\n    } else {\r\n      const spacing = 20;\r\n      const { x, y } = document\r\n        .querySelector(`.ViewerMain`)\r\n        .getBoundingClientRect();\r\n      const newDialogId = dialog.create({\r\n        content: ConnectedCineDialog,\r\n        defaultPosition: {\r\n          x: x + spacing || 0,\r\n          y: y + spacing || 0,\r\n        },\r\n      });\r\n      this.setState(state => ({\r\n        dialogId: newDialogId,\r\n        activeButtons: [...state.activeButtons, button],\r\n      }));\r\n    }\r\n  }\r\n\r\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\r\n    commandsManager.runCommand('showDownloadViewportModal', {\r\n      title: t('Download High Quality Image'),\r\n    });\r\n  }\r\n}\r\n\r\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\r\n  withModal(withDialog(withAppContext(ToolbarRow)))\r\n);\r\n","import OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport { StudyBrowser } from '@ohif/ui';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport findDisplaySetByUID from './findDisplaySetByUID';\r\n\r\nconst { studyMetadataManager } = OHIF.utils;\r\n\r\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\r\n\r\n// TODO\r\n// - Determine in which display set is active from Redux (activeViewportIndex and layout viewportData)\r\n// - Pass in errors and stack loading progress from Redux\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // If we know that the stack loading progress details have changed,\r\n  // we can try to update the component state so that the thumbnail\r\n  // progress bar is updated\r\n  const stackLoadingProgressMap = state.loading.progress;\r\n  const studiesWithLoadingData = cloneDeep(ownProps.studies);\r\n\r\n  studiesWithLoadingData.forEach(study => {\r\n    study.thumbnails.forEach(data => {\r\n      const { displaySetInstanceUID } = data;\r\n      const stackId = `StackProgress:${displaySetInstanceUID}`;\r\n      const stackProgressData = stackLoadingProgressMap[stackId];\r\n\r\n      let stackPercentComplete = 0;\r\n      if (stackProgressData) {\r\n        stackPercentComplete = stackProgressData.percentComplete;\r\n      }\r\n\r\n      data.stackPercentComplete = stackPercentComplete;\r\n    });\r\n  });\r\n\r\n  return {\r\n    studies: studiesWithLoadingData,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onThumbnailClick: displaySetInstanceUID => {\r\n      let displaySet = findDisplaySetByUID(\r\n        ownProps.studyMetadata,\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      if (displaySet.isDerived) {\r\n        const { Modality } = displaySet;\r\n\r\n        displaySet = displaySet.getSourceDisplaySet(ownProps.studyMetadata);\r\n\r\n        if (!displaySet) {\r\n          throw new Error(\r\n            `Referenced series for ${Modality} dataset not present.`\r\n          );\r\n        }\r\n\r\n        if (!displaySet) {\r\n          throw new Error('Source data not present');\r\n        }\r\n      }\r\n\r\n      dispatch(setActiveViewportSpecificData(displaySet));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedStudyBrowser = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(StudyBrowser);\r\n\r\nexport default ConnectedStudyBrowser;\r\n","/**\r\n * Finds displaySet by UID across all displaySets inside studyMetadata\r\n * @param {Array} studyMetadata\r\n * @param {string} displaySetInstanceUID\r\n */\r\nexport default function findDisplaySetByUID(\r\n  studyMetadata,\r\n  displaySetInstanceUID\r\n) {\r\n  if (!Array.isArray(studyMetadata)) return null;\r\n\r\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\r\n    let currentDisplaySet = [];\r\n    if (current && Array.isArray(current.displaySets)) {\r\n      currentDisplaySet = current.displaySets;\r\n    }\r\n    return all.concat(currentDisplaySet);\r\n  }, []);\r\n\r\n  const bySetInstanceUID = ds =>\r\n    ds.displaySetInstanceUID === displaySetInstanceUID;\r\n\r\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\r\n  return displaySet || null;\r\n}\r\n","import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport './ViewportPane.css';\r\n\r\nconst ViewportPane = function (props) {\r\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\r\n  const [{ hovered, highlighted }, drop] = useDrop({\r\n    accept: 'thumbnail',\r\n    drop: (droppedItem, monitor) => {\r\n      const canDrop = monitor.canDrop();\r\n      const isOver = monitor.isOver();\r\n\r\n      if (canDrop && isOver && onDrop) {\r\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\r\n\r\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\r\n      }\r\n    },\r\n    // Monitor, and collect props.\r\n    // Returned as values by `useDrop`\r\n    collect: monitor => ({\r\n      highlighted: monitor.canDrop(),\r\n      hovered: monitor.isOver(),\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        'viewport-drop-target',\r\n        { hovered: hovered },\r\n        { highlighted: highlighted },\r\n        propClassName\r\n      )}\r\n      ref={drop}\r\n      data-cy={`viewport-container-${viewportIndex}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportPane.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  onDrop: PropTypes.func.isRequired,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default ViewportPane;\r\n","import './ViewportGrid.css';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { utils } from '@ohif/core';\r\nimport { useSnackbarContext } from '@ohif/ui';\r\n//\r\nimport ViewportPane from './ViewportPane.js';\r\nimport DefaultViewport from './DefaultViewport.js';\r\nimport EmptyViewport from './EmptyViewport.js';\r\n\r\nconst { loadAndCacheDerivedDisplaySets } = utils;\r\n\r\nconst ViewportGrid = function(props) {\r\n  const {\r\n    activeViewportIndex,\r\n    availablePlugins,\r\n    defaultPlugin: defaultPluginName,\r\n    layout,\r\n    numRows,\r\n    numColumns,\r\n    setViewportData,\r\n    studies,\r\n    viewportData,\r\n    children,\r\n    isStudyLoaded,\r\n  } = props;\r\n\r\n  const rowSize = 100 / numRows;\r\n  const colSize = 100 / numColumns;\r\n\r\n  // http://grid.malven.co/\r\n  if (!viewportData || !viewportData.length) {\r\n    return null;\r\n  }\r\n\r\n  const snackbar = useSnackbarContext();\r\n\r\n  useEffect(() => {\r\n    if (isStudyLoaded) {\r\n      viewportData.forEach(displaySet => {\r\n        const promises = loadAndCacheDerivedDisplaySets(displaySet, studies);\r\n\r\n        promises.forEach(promise => {\r\n          promise.catch(error => {\r\n            snackbar.show({\r\n              title: 'Error loading derived display set:',\r\n              message: error.message,\r\n              type: 'error',\r\n              autoClose: false,\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [studies, viewportData, isStudyLoaded, snackbar]);\r\n\r\n  const getViewportPanes = () =>\r\n    layout.viewports.map((layout, viewportIndex) => {\r\n      const displaySet = viewportData[viewportIndex];\r\n\r\n      if (!displaySet) {\r\n        return null;\r\n      }\r\n\r\n      const data = {\r\n        displaySet,\r\n        studies,\r\n      };\r\n\r\n      // JAMES TODO:\r\n\r\n      // Use whichever plugin is currently in use in the panel\r\n      // unless nothing is specified. If nothing is specified\r\n      // and the display set has a plugin specified, use that.\r\n      //\r\n      // TODO: Change this logic to:\r\n      // - Plugins define how capable they are of displaying a SopClass\r\n      // - When updating a panel, ensure that the currently enabled plugin\r\n      // in the viewport is capable of rendering this display set. If not\r\n      // then use the most capable available plugin\r\n\r\n      const pluginName =\r\n        !layout.plugin && displaySet && displaySet.plugin\r\n          ? displaySet.plugin\r\n          : layout.plugin;\r\n\r\n      const ViewportComponent = _getViewportComponent(\r\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\r\n        viewportIndex,\r\n        children,\r\n        availablePlugins,\r\n        pluginName,\r\n        defaultPluginName\r\n      );\r\n\r\n      return (\r\n        <ViewportPane\r\n          onDrop={setViewportData}\r\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\r\n          className={classNames('viewport-container', {\r\n            active: activeViewportIndex === viewportIndex,\r\n          })}\r\n          key={viewportIndex}\r\n        >\r\n          {ViewportComponent}\r\n        </ViewportPane>\r\n      );\r\n    });\r\n\r\n  const ViewportPanes = React.useMemo(getViewportPanes, [\r\n    layout,\r\n    viewportData,\r\n    studies,\r\n    children,\r\n    availablePlugins,\r\n    defaultPluginName,\r\n    setViewportData,\r\n    activeViewportIndex,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      data-cy=\"viewprt-grid\"\r\n      style={{\r\n        display: 'grid',\r\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\r\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\r\n        height: '100%',\r\n        width: '100%',\r\n      }}\r\n    >\r\n      {ViewportPanes}\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportGrid.propTypes = {\r\n  viewportData: PropTypes.array.isRequired,\r\n  supportsDrop: PropTypes.bool.isRequired,\r\n  activeViewportIndex: PropTypes.number.isRequired,\r\n  layout: PropTypes.object.isRequired,\r\n  availablePlugins: PropTypes.object.isRequired,\r\n  setViewportData: PropTypes.func.isRequired,\r\n  studies: PropTypes.array,\r\n  children: PropTypes.node,\r\n  defaultPlugin: PropTypes.string,\r\n  numRows: PropTypes.number.isRequired,\r\n  numColumns: PropTypes.number.isRequired,\r\n};\r\n\r\nViewportGrid.defaultProps = {\r\n  viewportData: [],\r\n  numRows: 1,\r\n  numColumns: 1,\r\n  layout: {\r\n    viewports: [{}],\r\n  },\r\n  activeViewportIndex: 0,\r\n  supportsDrop: true,\r\n  availablePlugins: {\r\n    DefaultViewport,\r\n  },\r\n  defaultPlugin: 'defaultViewportPlugin',\r\n};\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} plugin\r\n * @param {*} viewportData\r\n * @param {*} viewportIndex\r\n * @param {*} children\r\n * @returns\r\n */\r\nfunction _getViewportComponent(\r\n  viewportData,\r\n  viewportIndex,\r\n  children,\r\n  availablePlugins,\r\n  pluginName,\r\n  defaultPluginName\r\n) {\r\n  if (viewportData.displaySet) {\r\n    pluginName = pluginName || defaultPluginName;\r\n    const ViewportComponent = availablePlugins[pluginName];\r\n\r\n    if (!ViewportComponent) {\r\n      throw new Error(\r\n        `No Viewport Component available for name ${pluginName}.\r\n         Available plugins: ${JSON.stringify(availablePlugins)}`\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ViewportComponent\r\n        viewportData={viewportData}\r\n        viewportIndex={viewportIndex}\r\n        children={[children]}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <EmptyViewport />;\r\n}\r\n\r\nexport default ViewportGrid;\r\n","/**\r\n *\r\n *\r\n * @export\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function DefaultViewport(props) {\r\n  return <div>{JSON.stringify(props)}</div>;\r\n}\r\n","import ViewportGrid from './ViewportGrid.js';\r\nimport { MODULE_TYPES } from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport { extensionManager } from './../../App.js';\r\nimport memoize from 'lodash/memoize';\r\n\r\nconst getAvailableViewportModules = memoize(viewportModules => {\r\n  const availableViewportModules = {};\r\n  viewportModules.forEach(moduleDefinition => {\r\n    availableViewportModules[moduleDefinition.extensionId] =\r\n      moduleDefinition.module;\r\n  });\r\n  return availableViewportModules;\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\r\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\r\n\r\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\r\n  let defaultPlugin;\r\n  if (viewportModules.length) {\r\n    defaultPlugin = viewportModules[0].extensionId;\r\n  }\r\n\r\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\r\n\r\n  return {\r\n    numRows,\r\n    numColumns,\r\n    layout,\r\n    activeViewportIndex,\r\n    // TODO: rename `availableViewportModules`\r\n    availablePlugins: availableViewportModules,\r\n    // TODO: rename `defaultViewportModule`\r\n    defaultPlugin,\r\n  };\r\n};\r\n\r\nconst ConnectedViewportGrid = connect(\r\n  mapStateToProps,\r\n  null\r\n)(ViewportGrid);\r\n\r\nexport default ConnectedViewportGrid;\r\n","import './ViewerMain.css';\r\n\r\nimport { Component } from 'react';\r\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport memoize from 'lodash/memoize';\r\nimport _values from 'lodash/values';\r\n\r\nvar values = memoize(_values);\r\n\r\nclass ViewerMain extends Component {\r\n  static propTypes = {\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    studies: PropTypes.array,\r\n    viewportSpecificData: PropTypes.object.isRequired,\r\n    layout: PropTypes.object.isRequired,\r\n    setViewportSpecificData: PropTypes.func.isRequired,\r\n    clearViewportSpecificData: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      displaySets: [],\r\n    };\r\n  }\r\n\r\n  getDisplaySets(studies) {\r\n    const displaySets = [];\r\n    studies.forEach(study => {\r\n      study.displaySets.forEach(dSet => {\r\n        if (!dSet.plugin) {\r\n          dSet.plugin = 'cornerstone';\r\n        }\r\n        displaySets.push(dSet);\r\n      });\r\n    });\r\n\r\n    return displaySets;\r\n  }\r\n\r\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\r\n    const study = studies.find(study => {\r\n      return study.StudyInstanceUID === StudyInstanceUID;\r\n    });\r\n\r\n    if (!study) {\r\n      return;\r\n    }\r\n\r\n    return study.displaySets.find(displaySet => {\r\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Add beforeUnload event handler to check for unsaved changes\r\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n\r\n    // Get all the display sets for the viewer studies\r\n    if (this.props.studies) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const prevViewportAmount = prevProps.layout.viewports.length;\r\n    const viewportAmount = this.props.layout.viewports.length;\r\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\r\n\r\n    if (\r\n      this.props.studies !== prevProps.studies ||\r\n      (viewportAmount !== prevViewportAmount && !isVtk)\r\n    ) {\r\n      const displaySets = this.getDisplaySets(this.props.studies);\r\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\r\n    }\r\n  }\r\n\r\n  fillEmptyViewportPanes = () => {\r\n    // TODO: Here is the entry point for filling viewports on load.\r\n    const dirtyViewportPanes = [];\r\n    const { layout, viewportSpecificData } = this.props;\r\n    const { displaySets } = this.state;\r\n\r\n    if (!displaySets || !displaySets.length) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < layout.viewports.length; i++) {\r\n      const viewportPane = viewportSpecificData[i];\r\n      const isNonEmptyViewport =\r\n        viewportPane &&\r\n        viewportPane.StudyInstanceUID &&\r\n        viewportPane.displaySetInstanceUID;\r\n\r\n      if (isNonEmptyViewport) {\r\n        dirtyViewportPanes.push({\r\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\r\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      const foundDisplaySet =\r\n        displaySets.find(\r\n          ds =>\r\n            !dirtyViewportPanes.some(\r\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\r\n            )\r\n        ) || displaySets[displaySets.length - 1];\r\n\r\n      dirtyViewportPanes.push(foundDisplaySet);\r\n    }\r\n\r\n    dirtyViewportPanes.forEach((vp, i) => {\r\n      if (vp && vp.StudyInstanceUID) {\r\n        this.setViewportData({\r\n          viewportIndex: i,\r\n          StudyInstanceUID: vp.StudyInstanceUID,\r\n          displaySetInstanceUID: vp.displaySetInstanceUID,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  setViewportData = ({\r\n    viewportIndex,\r\n    StudyInstanceUID,\r\n    displaySetInstanceUID,\r\n  }) => {\r\n    let displaySet = this.findDisplaySet(\r\n      this.props.studies,\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    if (displaySet.isDerived) {\r\n      const { Modality } = displaySet;\r\n      displaySet = displaySet.getSourceDisplaySet(this.props.studies);\r\n\r\n      if (!displaySet) {\r\n        throw new Error(\r\n          `Referenced series for ${Modality} dataset not present.`\r\n        );\r\n      }\r\n    }\r\n\r\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\r\n  };\r\n\r\n  render() {\r\n    const { viewportSpecificData } = this.props;\r\n    const viewportData = values(viewportSpecificData);\r\n\r\n    return (\r\n      <div className=\"ViewerMain\">\r\n        {this.state.displaySets.length && (\r\n          <ConnectedViewportGrid\r\n            isStudyLoaded={this.props.isStudyLoaded}\r\n            studies={this.props.studies}\r\n            viewportData={viewportData}\r\n            setViewportData={this.setViewportData}\r\n          >\r\n            {/* Children to add to each viewport that support children */}\r\n          </ConnectedViewportGrid>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Clear the entire viewport specific data\r\n    const { viewportSpecificData } = this.props;\r\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\r\n      this.props.clearViewportSpecificData(viewportIndex);\r\n    });\r\n\r\n    // TODO: These don't have to be viewer specific?\r\n    // Could qualify for other routes?\r\n    // hotkeys.destroy();\r\n\r\n    // Remove beforeUnload event handler...\r\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\r\n    // Destroy the synchronizer used to update reference lines\r\n    //OHIF.viewer.updateImageSynchronizer.destroy();\r\n    // TODO: Instruct all plugins to clean up themselves\r\n    //\r\n    // Clear references to all stacks in the StackManager\r\n    //StackManager.clearStacks();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.Studies collection\r\n    //OHIF.viewer.Studies.removeAll();\r\n    // @TypeSafeStudies\r\n    // Clears OHIF.viewer.StudyMetadataList collection\r\n    //OHIF.viewer.StudyMetadataList.removeAll();\r\n  }\r\n}\r\n\r\nexport default ViewerMain;\r\n","import OHIF from '@ohif/core';\r\nimport ViewerMain from './ViewerMain';\r\nimport { connect } from 'react-redux';\r\n\r\nconst {\r\n  setViewportSpecificData,\r\n  clearViewportSpecificData,\r\n} = OHIF.redux.actions;\r\n\r\nconst mapStateToProps = state => {\r\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\r\n\r\n  return {\r\n    activeViewportIndex,\r\n    layout,\r\n    viewportSpecificData,\r\n    viewports: state.viewports,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setViewportSpecificData: (viewportIndex, data) => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n    clearViewportSpecificData: () => {\r\n      dispatch(clearViewportSpecificData());\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewerMain = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ViewerMain);\r\n\r\nexport default ConnectedViewerMain;\r\n","import './SidePanel.css';\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nclass SidePanel extends Component {\r\n  static propTypes = {\r\n    from: PropTypes.string.isRequired,\r\n    isOpen: PropTypes.bool.isRequired,\r\n    children: PropTypes.node,\r\n    width: PropTypes.string,\r\n  };\r\n\r\n  render() {\r\n    const fromSideClass =\r\n      this.props.from === 'right' ? 'from-right' : 'from-left';\r\n\r\n    const styles = this.props.width\r\n      ? {\r\n          maxWidth: this.props.width,\r\n          marginRight: this.props.isOpen\r\n            ? '0'\r\n            : Number.parseInt(this.props.width) * -1,\r\n        }\r\n      : {};\r\n\r\n    return (\r\n      <section\r\n        style={styles}\r\n        className={classNames('sidepanel', fromSideClass, {\r\n          'is-open': this.props.isOpen,\r\n        })}\r\n      >\r\n        {this.props.children}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SidePanel;\r\n","import React, { useState } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { ErrorBoundary, Icon } from '@ohif/ui';\r\nimport { servicesManager } from './../../App';\r\n\r\nimport './ErrorBoundaryDialog.css';\r\n\r\nconst { UIModalService } = servicesManager.services;\r\n\r\nconst ErrorBoundaryDialog = ({ context, children }) => {\r\n  const handleOnError = (error, componentStack) => {\r\n    const ErrorDialog = () => {\r\n      const [open, setOpen] = useState(false);\r\n\r\n      return (\r\n        <div className=\"ErrorFallback\" role=\"alert\">\r\n          <div className=\"ErrorBoundaryDialog\">\r\n            <h3 className=\"ErrorBoundaryDialogTitle\">\r\n              {context}: <span>{error.message}</span>\r\n            </h3>\r\n          </div>\r\n          <button\r\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\r\n            onClick={() => setOpen(s => !s)}\r\n          >\r\n            <Icon\r\n              name=\"chevron-down\"\r\n              className={classnames('ErrorBoundaryDialogIcon', {\r\n                opened: open,\r\n              })}\r\n            />\r\n            Stack Trace\r\n          </button>\r\n\r\n          {open && <pre>{componentStack}</pre>}\r\n        </div>\r\n      );\r\n    };\r\n\r\n    UIModalService.show({\r\n      content: ErrorDialog,\r\n      title: `Something went wrong in ${context}`,\r\n    });\r\n  };\r\n\r\n  const fallbackComponent = () => (\r\n    <div className=\"ErrorFallback\" role=\"alert\">\r\n      <p>\r\n        Error rendering {context}. <br /> Check the browser console for more\r\n        details.\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ErrorBoundary\r\n      fallbackComponent={fallbackComponent}\r\n      context={context}\r\n      onError={handleOnError}\r\n    >\r\n      {children}\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nErrorBoundaryDialog.propTypes = {\r\n  context: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\r\n\r\nexport default ErrorBoundaryDialog;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\r\nimport { withDialog } from '@ohif/ui';\r\nimport moment from 'moment';\r\nimport ConnectedHeader from './ConnectedHeader.js';\r\nimport ToolbarRow from './ToolbarRow.js';\r\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\r\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\r\nimport SidePanel from './../components/SidePanel.js';\r\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\r\nimport { extensionManager } from './../App.js';\r\n\r\n// Contexts\r\nimport WhiteLabelingContext from '../context/WhiteLabelingContext.js';\r\nimport UserManagerContext from '../context/UserManagerContext';\r\nimport AppContext from '../context/AppContext';\r\n\r\nimport './Viewer.css';\r\nimport { finished } from 'stream';\r\n\r\nclass Viewer extends Component {\r\n  static propTypes = {\r\n    studies: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        StudyInstanceUID: PropTypes.string.isRequired,\r\n        StudyDate: PropTypes.string,\r\n        PatientID: PropTypes.string,\r\n        displaySets: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            displaySetInstanceUID: PropTypes.string.isRequired,\r\n            SeriesDescription: PropTypes.string,\r\n            SeriesNumber: PropTypes.number,\r\n            InstanceNumber: PropTypes.number,\r\n            numImageFrames: PropTypes.number,\r\n            Modality: PropTypes.string.isRequired,\r\n            images: PropTypes.arrayOf(\r\n              PropTypes.shape({\r\n                getImageId: PropTypes.func.isRequired,\r\n              })\r\n            ),\r\n          })\r\n        ),\r\n      })\r\n    ),\r\n    studyInstanceUIDs: PropTypes.array,\r\n    activeServer: PropTypes.shape({\r\n      type: PropTypes.string,\r\n      wadoRoot: PropTypes.string,\r\n    }),\r\n    onTimepointsUpdated: PropTypes.func,\r\n    onMeasurementsUpdated: PropTypes.func,\r\n    // window.store.getState().viewports.viewportSpecificData\r\n    viewports: PropTypes.object.isRequired,\r\n    // window.store.getState().viewports.activeViewportIndex\r\n    activeViewportIndex: PropTypes.number.isRequired,\r\n    isStudyLoaded: PropTypes.bool,\r\n    dialog: PropTypes.object,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { activeServer } = this.props;\r\n    const server = Object.assign({}, activeServer);\r\n\r\n    OHIF.measurements.MeasurementApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: DICOMSR.retrieveMeasurements,\r\n        store: DICOMSR.storeMeasurements,\r\n      },\r\n      server,\r\n    });\r\n\r\n    OHIF.measurements.TimepointApi.setConfiguration({\r\n      dataExchange: {\r\n        retrieve: this.retrieveTimepoints,\r\n        store: this.storeTimepoints,\r\n        remove: this.removeTimepoint,\r\n        update: this.updateTimepoint,\r\n        disassociate: this.disassociateStudy,\r\n      },\r\n    });\r\n  }\r\n\r\n  state = {\r\n    isLeftSidePanelOpen: true,\r\n    isRightSidePanelOpen: false,\r\n    selectedRightSidePanel: '',\r\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\r\n    thumbnails: [],\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.dialog) {\r\n      this.props.dialog.dismissAll();\r\n    }\r\n  }\r\n\r\n  retrieveTimepoints = filter => {\r\n    OHIF.log.info('retrieveTimepoints');\r\n\r\n    // Get the earliest and latest study date\r\n    let earliestDate = new Date().toISOString();\r\n    let latestDate = new Date().toISOString();\r\n    if (this.props.studies) {\r\n      latestDate = new Date('1000-01-01').toISOString();\r\n      this.props.studies.forEach(study => {\r\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\r\n        if (StudyDate < earliestDate) {\r\n          earliestDate = StudyDate;\r\n        }\r\n        if (StudyDate > latestDate) {\r\n          latestDate = StudyDate;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Return a generic timepoint\r\n    return Promise.resolve([\r\n      {\r\n        timepointType: 'baseline',\r\n        timepointId: 'TimepointId',\r\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\r\n        PatientID: filter.PatientID,\r\n        earliestDate,\r\n        latestDate,\r\n        isLocked: false,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  storeTimepoints = timepointData => {\r\n    OHIF.log.info('storeTimepoints');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  updateTimepoint = (timepointData, query) => {\r\n    OHIF.log.info('updateTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  removeTimepoint = timepointId => {\r\n    OHIF.log.info('removeTimepoint');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\r\n    OHIF.log.info('disassociateStudy');\r\n    return Promise.resolve();\r\n  };\r\n\r\n  onTimepointsUpdated = timepoints => {\r\n    if (this.props.onTimepointsUpdated) {\r\n      this.props.onTimepointsUpdated(timepoints);\r\n    }\r\n  };\r\n\r\n  onMeasurementsUpdated = measurements => {\r\n    if (this.props.onMeasurementsUpdated) {\r\n      this.props.onMeasurementsUpdated(measurements);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { studies, isStudyLoaded } = this.props;\r\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\r\n    const currentTimepointId = 'TimepointId';\r\n\r\n    const timepointApi = new TimepointApi(currentTimepointId, {\r\n      onTimepointsUpdated: this.onTimepointsUpdated,\r\n    });\r\n\r\n    const measurementApi = new MeasurementApi(timepointApi, {\r\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\r\n    });\r\n\r\n    this.currentTimepointId = currentTimepointId;\r\n    this.timepointApi = timepointApi;\r\n    this.measurementApi = measurementApi;\r\n\r\n    if (studies) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n\r\n      timepointApi.retrieveTimepoints({ PatientID });\r\n      if (isStudyLoaded) {\r\n        this.measurementApi.retrieveMeasurements(PatientID, [\r\n          currentTimepointId,\r\n        ]);\r\n      }\r\n\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(studies),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { studies, isStudyLoaded } = this.props;\r\n\r\n    if (studies !== prevProps.studies) {\r\n      this.setState({\r\n        thumbnails: _mapStudiesToThumbnails(studies),\r\n      });\r\n    }\r\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\r\n      const PatientID = studies[0] && studies[0].PatientID;\r\n      const { currentTimepointId } = this;\r\n\r\n      this.timepointApi.retrieveTimepoints({ PatientID });\r\n      this.measurementApi.retrieveMeasurements(PatientID, [currentTimepointId]);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let VisiblePanelLeft, VisiblePanelRight;\r\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\r\n\r\n    panelExtensions.forEach(panelExt => {\r\n      panelExt.module.components.forEach(comp => {\r\n        if (comp.id === this.state.selectedRightSidePanel) {\r\n          VisiblePanelRight = comp.component;\r\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\r\n          VisiblePanelLeft = comp.component;\r\n        }\r\n      });\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {/* HEADER */}\r\n        <WhiteLabelingContext.Consumer>\r\n          {whiteLabeling => (\r\n            <UserManagerContext.Consumer>\r\n              {userManager => (\r\n                <AppContext.Consumer>\r\n                  {appContext => (\r\n                    <ConnectedHeader\r\n                      linkText={\r\n                        appContext.appConfig.showStudyList\r\n                          ? 'Study List'\r\n                          : undefined\r\n                      }\r\n                      linkPath={\r\n                        appContext.appConfig.showStudyList ? '/' : undefined\r\n                      }\r\n                      userManager={userManager}\r\n                    >\r\n                      {whiteLabeling &&\r\n                        whiteLabeling.createLogoComponentFn &&\r\n                        whiteLabeling.createLogoComponentFn(React)}\r\n                    </ConnectedHeader>\r\n                  )}\r\n                </AppContext.Consumer>\r\n              )}\r\n            </UserManagerContext.Consumer>\r\n          )}\r\n        </WhiteLabelingContext.Consumer>\r\n\r\n        {/* TOOLBAR */}\r\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\r\n          <ToolbarRow\r\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\r\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\r\n            selectedLeftSidePanel={\r\n              this.state.isLeftSidePanelOpen\r\n                ? this.state.selectedLeftSidePanel\r\n                : ''\r\n            }\r\n            selectedRightSidePanel={\r\n              this.state.isRightSidePanelOpen\r\n                ? this.state.selectedRightSidePanel\r\n                : ''\r\n            }\r\n            handleSidePanelChange={(side, selectedPanel) => {\r\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\r\n              const openKey = `is${sideClicked}SidePanelOpen`;\r\n              const selectedKey = `selected${sideClicked}SidePanel`;\r\n              const updatedState = Object.assign({}, this.state);\r\n\r\n              const isOpen = updatedState[openKey];\r\n              const prevSelectedPanel = updatedState[selectedKey];\r\n              // RoundedButtonGroup returns `null` if selected button is clicked\r\n              const isSameSelectedPanel =\r\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\r\n\r\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\r\n\r\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\r\n              if (isClosedOrShouldClose) {\r\n                updatedState[openKey] = !updatedState[openKey];\r\n              }\r\n\r\n              this.setState(updatedState);\r\n            }}\r\n            studies={this.props.studies}\r\n          />\r\n        </ErrorBoundaryDialog>\r\n\r\n        {/*<ConnectedStudyLoadingMonitor studies={this.props.studies} />*/}\r\n        {/*<StudyPrefetcher studies={this.props.studies} />*/}\r\n\r\n        {/* VIEWPORTS + SIDEPANELS */}\r\n        <div className=\"FlexboxLayout\">\r\n          {/* LEFT */}\r\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\r\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\r\n              {VisiblePanelLeft ? (\r\n                <VisiblePanelLeft\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                />\r\n              ) : (\r\n                <ConnectedStudyBrowser\r\n                  studies={this.state.thumbnails}\r\n                  studyMetadata={this.props.studies}\r\n                />\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n\r\n          {/* MAIN */}\r\n          <div className={classNames('main-content')}>\r\n            <ErrorBoundaryDialog context=\"ViewerMain\">\r\n              <ConnectedViewerMain\r\n                studies={this.props.studies}\r\n                isStudyLoaded={this.props.isStudyLoaded}\r\n              />\r\n            </ErrorBoundaryDialog>\r\n          </div>\r\n\r\n          {/* RIGHT */}\r\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\r\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\r\n              {VisiblePanelRight && (\r\n                <VisiblePanelRight\r\n                  isOpen={this.state.isRightSidePanelOpen}\r\n                  viewports={this.props.viewports}\r\n                  studies={this.props.studies}\r\n                  activeIndex={this.props.activeViewportIndex}\r\n                />\r\n              )}\r\n            </SidePanel>\r\n          </ErrorBoundaryDialog>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withDialog(Viewer);\r\n\r\n/**\r\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\r\n * a mapping layer?\r\n *\r\n * TODO[react]:\r\n * - Add showStackLoadingProgressBar option\r\n *\r\n * @param {Study[]} studies\r\n * @param {DisplaySet[]} studies[].displaySets\r\n */\r\nconst _mapStudiesToThumbnails = function(studies) {\r\n  return studies.map(study => {\r\n    const { StudyInstanceUID } = study;\r\n\r\n    const thumbnails = study.displaySets.map(displaySet => {\r\n      const {\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        InstanceNumber,\r\n        numImageFrames,\r\n        SeriesNumber,\r\n      } = displaySet;\r\n\r\n      let imageId;\r\n      let altImageText;\r\n\r\n      if (displaySet.Modality && displaySet.Modality === 'SEG') {\r\n        // TODO: We want to replace this with a thumbnail showing\r\n        // the segmentation map on the image, but this is easier\r\n        // and better than what we have right now.\r\n        altImageText = 'SEG';\r\n      } else if (displaySet.images && displaySet.images.length) {\r\n        const imageIndex = Math.floor(displaySet.images.length / 2);\r\n\r\n        imageId = displaySet.images[imageIndex].getImageId();\r\n      } else {\r\n        altImageText = displaySet.Modality ? displaySet.Modality : 'UN';\r\n      }\r\n\r\n      return {\r\n        imageId,\r\n        altImageText,\r\n        displaySetInstanceUID,\r\n        SeriesDescription,\r\n        InstanceNumber,\r\n        numImageFrames,\r\n        SeriesNumber,\r\n      };\r\n    });\r\n\r\n    return {\r\n      StudyInstanceUID,\r\n      thumbnails,\r\n    };\r\n  });\r\n};\r\n","import { connect } from 'react-redux';\r\nimport Viewer from './Viewer.js';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\r\n\r\nconst getActiveServer = servers => {\r\n  const isActive = a => a.active === true;\r\n  return servers.servers.find(isActive);\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { viewports, servers } = state;\r\n  return {\r\n    viewports: viewports.viewportSpecificData,\r\n    activeViewportIndex: viewports.activeViewportIndex,\r\n    activeServer: getActiveServer(servers),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onTimepointsUpdated: timepoints => {\r\n      dispatch(setTimepoints(timepoints));\r\n    },\r\n    onMeasurementsUpdated: measurements => {\r\n      dispatch(setMeasurements(measurements));\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedViewer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Viewer);\r\n\r\nexport default ConnectedViewer;\r\n","export default class FileLoader {\r\n  fileType;\r\n  loadFile(file, imageId) { }\r\n  getDataset(image, imageId) { }\r\n  getStudies(dataset, imageId) { }\r\n}\r\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\r\nimport FileLoader from './fileLoader';\r\n\r\nconst PDFFileLoader = new (class extends FileLoader {\r\n  fileType = 'application/pdf';\r\n  loadFile(file, imageId) {\r\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\r\n  }\r\n\r\n  getDataset(image, imageId) {\r\n    const dataset = {};\r\n    dataset.imageId = image.imageId || imageId;\r\n    return dataset;\r\n  }\r\n\r\n  getStudies(dataset, imageId) {\r\n    return this.getDefaultStudy(imageId);\r\n  }\r\n\r\n  getDefaultStudy(imageId) {\r\n    const study = {\r\n      StudyInstanceUID: '',\r\n      StudyDate: '',\r\n      StudyTime: '',\r\n      AccessionNumber: '',\r\n      ReferringPhysicianName: '',\r\n      PatientName: '',\r\n      PatientID: '',\r\n      PatientBirthdate: '',\r\n      PatientSex: '',\r\n      StudyId: '',\r\n      StudyDescription: '',\r\n      series: [\r\n        {\r\n          SeriesInstanceUID: '',\r\n          SeriesDescription: '',\r\n          SeriesNumber: '',\r\n          instances: [\r\n            {\r\n              metadata: {\r\n                SOPInstanceUID: '',\r\n                SOPClassUID: '1.2.840.10008.5.1.4.1.1.104.1',\r\n                Rows: '',\r\n                Columns: '',\r\n                NumberOfFrames: 0,\r\n                InstanceNumber: 1,\r\n              },\r\n              getImageId: () => imageId,\r\n              isLocalFile: true,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    return study;\r\n  }\r\n})();\r\n\r\nexport default PDFFileLoader;\r\n","import dcmjs from 'dcmjs';\r\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\r\nimport FileLoader from './fileLoader';\r\nimport OHIF from '@ohif/core';\r\n\r\nconst metadataProvider = OHIF.cornerstone.metadataProvider;\r\n\r\nconst DICOMFileLoader = new (class extends FileLoader {\r\n  fileType = 'application/dicom';\r\n  loadFile(file, imageId) {\r\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\r\n  }\r\n\r\n  getDataset(image, imageId) {\r\n    let dataset = {};\r\n    try {\r\n      const dicomData = dcmjs.data.DicomMessage.readFile(image);\r\n\r\n      dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\r\n        dicomData.dict\r\n      );\r\n\r\n      metadataProvider.addInstance(dataset);\r\n\r\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\r\n        dicomData.meta\r\n      );\r\n    } catch (e) {\r\n      console.error('Error reading dicom file', e);\r\n    }\r\n    // Set imageId on dataset to be consumed later on\r\n    dataset.imageId = imageId;\r\n\r\n    return dataset;\r\n  }\r\n\r\n  getStudies(dataset, imageId) {\r\n    return this.getStudyFromDataset(dataset);\r\n  }\r\n\r\n  getStudyFromDataset(dataset = {}) {\r\n    const {\r\n      StudyInstanceUID,\r\n      StudyDate,\r\n      StudyTime,\r\n      AccessionNumber,\r\n      ReferringPhysicianName,\r\n      PatientName,\r\n      PatientID,\r\n      PatientBirthDate,\r\n      PatientSex,\r\n      StudyID,\r\n      StudyDescription,\r\n      SeriesInstanceUID,\r\n      SeriesDescription,\r\n      SeriesNumber,\r\n      imageId,\r\n    } = dataset;\r\n\r\n    const instance = {\r\n      metadata: dataset,\r\n      url: imageId,\r\n    };\r\n\r\n    const series = {\r\n      SeriesInstanceUID: SeriesInstanceUID,\r\n      SeriesDescription: SeriesDescription,\r\n      SeriesNumber: SeriesNumber,\r\n      instances: [instance],\r\n    };\r\n\r\n    const study = {\r\n      StudyInstanceUID,\r\n      StudyDate,\r\n      StudyTime,\r\n      AccessionNumber,\r\n      ReferringPhysicianName,\r\n      PatientName,\r\n      PatientID,\r\n      PatientBirthDate,\r\n      PatientSex,\r\n      StudyID,\r\n      StudyDescription,\r\n      /*\r\n      TODO: in case necessary to uncomment this block, double check every property\r\n      numberOfStudyRelatedSeries: NumberOfStudyRelatedSeries || DICOMWeb.getString(dataset['00201206']),\r\n      numberOfStudyRelatedInstances: NumberOfStudyRelatedInstances || DICOMWeb.getString(dataset['00201208']),\r\n      Modality: Modality || DICOMWeb.getString(dataset['00080060']),\r\n      ModalitiesInStudy: ModalitiesInStudy || DICOMWeb.getString(dataset['00080061']),\r\n      modalities:\r\n      */\r\n      series: [series],\r\n    };\r\n\r\n    return study;\r\n  }\r\n})();\r\n\r\nexport default DICOMFileLoader;\r\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\r\nimport FileLoader from './fileLoader';\r\nimport PDFFileLoader from './pdfFileLoader';\r\nimport DICOMFileLoader from './dicomFileLoader';\r\n\r\nclass FileLoaderService extends FileLoader {\r\n  fileType;\r\n  loader;\r\n  constructor(file) {\r\n    super();\r\n    const fileType = file && file.type;\r\n    this.loader = this.getLoader(fileType);\r\n    this.fileType = this.loader.fileType;\r\n  }\r\n\r\n  static groupSeries(studies) {\r\n    const groupBy = (list, groupByKey, listKey) => {\r\n      let nonKeyCounter = 1;\r\n\r\n      return list.reduce((acc, obj) => {\r\n        let key = obj[groupByKey];\r\n        const list = obj[listKey];\r\n\r\n        // in case key not found, group it using counter\r\n        key = !!key ? key : '' + nonKeyCounter++;\r\n\r\n        if (!acc[key]) {\r\n          acc[key] = { ...obj };\r\n          acc[key][listKey] = [];\r\n        }\r\n\r\n        acc[key][listKey].push(...list);\r\n\r\n        return acc;\r\n      }, {});\r\n    };\r\n\r\n    const studiesGrouped = Object.values(\r\n      groupBy(studies, 'StudyInstanceUID', 'series')\r\n    );\r\n\r\n    const result = studiesGrouped.map(studyGroup => {\r\n      const seriesGrouped = groupBy(\r\n        studyGroup.series,\r\n        'SeriesInstanceUID',\r\n        'instances'\r\n      );\r\n      studyGroup.series = Object.values(seriesGrouped);\r\n\r\n      return studyGroup;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  addFile(file) {\r\n    return cornerstoneWADOImageLoader.wadouri.fileManager.add(file);\r\n  }\r\n\r\n  loadFile(file, imageId) {\r\n    return this.loader.loadFile(file, imageId);\r\n  }\r\n\r\n  getDataset(image, imageId) {\r\n    return this.loader.getDataset(image, imageId);\r\n  }\r\n\r\n  getStudies(dataset, imageId) {\r\n    return this.loader.getStudies(dataset, imageId);\r\n  }\r\n\r\n  getLoader(fileType) {\r\n    if (fileType === 'application/pdf') {\r\n      return PDFFileLoader;\r\n    } else {\r\n      // Default to dicom loader\r\n      return DICOMFileLoader;\r\n    }\r\n  }\r\n}\r\n\r\nexport default FileLoaderService;\r\n","import FileLoaderService from './localFileLoaders/fileLoaderService';\r\n\r\nconst processFile = async file => {\r\n  try {\r\n    const fileLoaderService = new FileLoaderService(file);\r\n    const imageId = fileLoaderService.addFile(file);\r\n    const image = await fileLoaderService.loadFile(file, imageId);\r\n    const dataset = await fileLoaderService.getDataset(image, imageId);\r\n    const studies = await fileLoaderService.getStudies(dataset, imageId);\r\n\r\n    return studies;\r\n  } catch (error) {\r\n    console.log(\r\n      error.name,\r\n      ':Error when trying to load and process local files:',\r\n      error.message\r\n    );\r\n  }\r\n};\r\n\r\nexport default async function filesToStudies(files) {\r\n  const processFilesPromises = files.map(processFile);\r\n  const studies = await Promise.all(processFilesPromises);\r\n\r\n  return FileLoaderService.groupSeries(studies.flat());\r\n}\r\n"],"sourceRoot":""}