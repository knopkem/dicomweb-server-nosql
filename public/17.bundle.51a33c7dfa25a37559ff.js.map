{"version":3,"sources":["webpack:///C:/dev/Viewers/extensions/cornerstone/src/ConnectedCornerstoneViewport.js","webpack:///C:/dev/Viewers/extensions/cornerstone/src/OHIFCornerstoneViewport.js"],"names":["OHIF","redux","actions","setViewportActive","setViewportSpecificData","measurements","MeasurementHandlers","onAdded","onRemoved","onModified","MEASUREMENT_ACTION_MAP","added","removed","modified","throttle","event","ConnectedCornerstoneViewport","connect","state","ownProps","dataFromStore","extensions","cornerstone","viewportIndex","isActive","viewports","activeViewportIndex","viewportSpecificData","isPlaying","frameRate","cine","cineFrameRate","isStackPrefetchEnabled","dispatch","data","onElementEnabled","enabledElement","detail","element","setEnabledElement","plugin","onMeasurementsChanged","action","CornerstoneViewport","StackManager","utils","OHIFCornerstoneViewport","viewportData","studies","StudyInstanceUID","displaySetInstanceUID","SOPInstanceUID","frameIndex","stack","getCornerstoneStack","console","log","clearStacks","length","Error","study","find","displaySet","displaySets","set","storedStack","findOrCreateStack","Object","assign","currentImageIdIndex","index","imageIds","findIndex","imageId","metaData","get","warn","this","props","sopClassUIDs","getViewportData","then","setState","setStateFromProps","prevProps","prevDisplaySet","childrenWithProps","children","map","child","React","cloneElement","key","imageIdIndex","onNewImage","sopInstanceUid","onNewImageDebounceTime","customProps","Component","PropTypes","object","number","node"],"mappings":"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","file":"17.bundle.51a33c7dfa25a37559ff.js","sourcesContent":["import CornerstoneViewport from 'react-cornerstone-viewport';\r\nimport OHIF from '@ohif/core';\r\nimport { connect } from 'react-redux';\r\nimport throttle from 'lodash.throttle';\r\nimport { setEnabledElement } from './state';\r\n\r\nconst { setViewportActive, setViewportSpecificData } = OHIF.redux.actions;\r\nconst {\r\n  onAdded,\r\n  onRemoved,\r\n  onModified,\r\n} = OHIF.measurements.MeasurementHandlers;\r\n\r\n// TODO: Transition to enums for the action names so that we can ensure they stay up to date\r\n// everywhere they're used.\r\nconst MEASUREMENT_ACTION_MAP = {\r\n  added: onAdded,\r\n  removed: onRemoved,\r\n  modified: throttle(event => {\r\n    return onModified(event);\r\n  }, 300),\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let dataFromStore;\r\n\r\n  // TODO: This may not be updated anymore :thinking:\r\n  if (state.extensions && state.extensions.cornerstone) {\r\n    dataFromStore = state.extensions.cornerstone;\r\n  }\r\n\r\n  // If this is the active viewport, enable prefetching.\r\n  const { viewportIndex } = ownProps; //.viewportData;\r\n  const isActive = viewportIndex === state.viewports.activeViewportIndex;\r\n  const viewportSpecificData =\r\n    state.viewports.viewportSpecificData[viewportIndex] || {};\r\n\r\n  // CINE\r\n  let isPlaying = false;\r\n  let frameRate = 24;\r\n\r\n  if (viewportSpecificData && viewportSpecificData.cine) {\r\n    const cine = viewportSpecificData.cine;\r\n\r\n    isPlaying = cine.isPlaying === true;\r\n    frameRate = cine.cineFrameRate || frameRate;\r\n  }\r\n\r\n  return {\r\n    // layout: state.viewports.layout,\r\n    isActive,\r\n    // TODO: Need a cleaner and more versatile way.\r\n    // Currently justing using escape hatch + commands\r\n    // activeTool: activeButton && activeButton.command,\r\n    ...dataFromStore,\r\n    isStackPrefetchEnabled: isActive,\r\n    isPlaying,\r\n    frameRate,\r\n    //stack: viewportSpecificData.stack,\r\n    // viewport: viewportSpecificData.viewport,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  const { viewportIndex } = ownProps;\r\n\r\n  return {\r\n    setViewportActive: () => {\r\n      dispatch(setViewportActive(viewportIndex));\r\n    },\r\n\r\n    setViewportSpecificData: data => {\r\n      dispatch(setViewportSpecificData(viewportIndex, data));\r\n    },\r\n\r\n    /**\r\n     * Our component \"enables\" the underlying dom element on \"componentDidMount\"\r\n     * It listens for that event, and then emits the enabledElement. We can grab\r\n     * a reference to it here, to make playing with cornerstone's native methods\r\n     * easier.\r\n     */\r\n    onElementEnabled: event => {\r\n      const enabledElement = event.detail.element;\r\n      setEnabledElement(viewportIndex, enabledElement);\r\n      dispatch(\r\n        setViewportSpecificData(viewportIndex, {\r\n          // TODO: Hack to make sure our plugin info is available from the outset\r\n          plugin: 'cornerstone',\r\n        })\r\n      );\r\n    },\r\n\r\n    onMeasurementsChanged: (event, action) => {\r\n      return MEASUREMENT_ACTION_MAP[action](event);\r\n    },\r\n  };\r\n};\r\n\r\nconst ConnectedCornerstoneViewport = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CornerstoneViewport);\r\n\r\nexport default ConnectedCornerstoneViewport;\r\n","import React, { Component } from 'react';\r\n\r\nimport ConnectedCornerstoneViewport from './ConnectedCornerstoneViewport';\r\nimport OHIF from '@ohif/core';\r\nimport PropTypes from 'prop-types';\r\nimport cornerstone from 'cornerstone-core';\r\n\r\nconst { StackManager } = OHIF.utils;\r\n\r\nclass OHIFCornerstoneViewport extends Component {\r\n  state = {\r\n    viewportData: null,\r\n  };\r\n\r\n  static defaultProps = {\r\n    customProps: {},\r\n  };\r\n\r\n  static propTypes = {\r\n    studies: PropTypes.object,\r\n    displaySet: PropTypes.object,\r\n    viewportIndex: PropTypes.number,\r\n    children: PropTypes.node,\r\n    customProps: PropTypes.object,\r\n  };\r\n\r\n  static id = 'OHIFCornerstoneViewport';\r\n\r\n  static init() {\r\n    console.log('OHIFCornerstoneViewport init()');\r\n  }\r\n\r\n  static destroy() {\r\n    console.log('OHIFCornerstoneViewport destroy()');\r\n    StackManager.clearStacks();\r\n  }\r\n\r\n  /**\r\n   * Obtain the CornerstoneTools Stack for the specified display set.\r\n   *\r\n   * @param {Object[]} studies\r\n   * @param {String} StudyInstanceUID\r\n   * @param {String} displaySetInstanceUID\r\n   * @param {String} [SOPInstanceUID]\r\n   * @param {Number} [frameIndex=1]\r\n   * @return {Object} CornerstoneTools Stack\r\n   */\r\n  static getCornerstoneStack(\r\n    studies,\r\n    StudyInstanceUID,\r\n    displaySetInstanceUID,\r\n    SOPInstanceUID,\r\n    frameIndex = 0\r\n  ) {\r\n    if (!studies || !studies.length) {\r\n      throw new Error('Studies not provided.');\r\n    }\r\n\r\n    if (!StudyInstanceUID) {\r\n      throw new Error('StudyInstanceUID not provided.');\r\n    }\r\n\r\n    if (!displaySetInstanceUID) {\r\n      throw new Error('StudyInstanceUID not provided.');\r\n    }\r\n\r\n    // Create shortcut to displaySet\r\n    const study = studies.find(\r\n      study => study.StudyInstanceUID === StudyInstanceUID\r\n    );\r\n\r\n    if (!study) {\r\n      throw new Error('Study not found.');\r\n    }\r\n\r\n    const displaySet = study.displaySets.find(set => {\r\n      return set.displaySetInstanceUID === displaySetInstanceUID;\r\n    });\r\n\r\n    if (!displaySet) {\r\n      throw new Error('Display Set not found.');\r\n    }\r\n\r\n    // Get stack from Stack Manager\r\n    const storedStack = StackManager.findOrCreateStack(study, displaySet);\r\n\r\n    // Clone the stack here so we don't mutate it\r\n    const stack = Object.assign({}, storedStack);\r\n    stack.currentImageIdIndex = frameIndex;\r\n\r\n    if (SOPInstanceUID) {\r\n      const index = stack.imageIds.findIndex(imageId => {\r\n        const imageIdSOPInstanceUID = cornerstone.metaData.get(\r\n          'SOPInstanceUID',\r\n          imageId\r\n        );\r\n\r\n        return imageIdSOPInstanceUID === SOPInstanceUID;\r\n      });\r\n\r\n      if (index > -1) {\r\n        stack.currentImageIdIndex = index;\r\n      } else {\r\n        console.warn(\r\n          'SOPInstanceUID provided was not found in specified DisplaySet'\r\n        );\r\n      }\r\n    }\r\n\r\n    return stack;\r\n  }\r\n\r\n  getViewportData = async (\r\n    studies,\r\n    StudyInstanceUID,\r\n    displaySetInstanceUID,\r\n    SOPInstanceUID,\r\n    frameIndex\r\n  ) => {\r\n    let viewportData;\r\n\r\n    const stack = OHIFCornerstoneViewport.getCornerstoneStack(\r\n      studies,\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      SOPInstanceUID,\r\n      frameIndex\r\n    );\r\n\r\n    viewportData = {\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      stack,\r\n    };\r\n\r\n    return viewportData;\r\n  };\r\n\r\n  setStateFromProps() {\r\n    const { studies, displaySet } = this.props.viewportData;\r\n    const {\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      sopClassUIDs,\r\n      SOPInstanceUID,\r\n      frameIndex,\r\n    } = displaySet;\r\n\r\n    if (!StudyInstanceUID || !displaySetInstanceUID) {\r\n      return;\r\n    }\r\n\r\n    if (sopClassUIDs && sopClassUIDs.length > 1) {\r\n      console.warn(\r\n        'More than one SOPClassUID in the same series is not yet supported.'\r\n      );\r\n    }\r\n\r\n    this.getViewportData(\r\n      studies,\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      SOPInstanceUID,\r\n      frameIndex\r\n    ).then(viewportData => {\r\n      this.setState({\r\n        viewportData,\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setStateFromProps();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { displaySet } = this.props.viewportData;\r\n    const prevDisplaySet = prevProps.viewportData.displaySet;\r\n\r\n    if (\r\n      displaySet.displaySetInstanceUID !==\r\n      prevDisplaySet.displaySetInstanceUID ||\r\n      displaySet.SOPInstanceUID !== prevDisplaySet.SOPInstanceUID ||\r\n      displaySet.frameIndex !== prevDisplaySet.frameIndex\r\n    ) {\r\n      this.setStateFromProps();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let childrenWithProps = null;\r\n\r\n    if (!this.state.viewportData) {\r\n      return null;\r\n    }\r\n    const { viewportIndex } = this.props;\r\n    const {\r\n      imageIds,\r\n      currentImageIdIndex,\r\n      // If this comes from the instance, would be a better default\r\n      // `FrameTime` in the instance\r\n      // frameRate = 0,\r\n    } = this.state.viewportData.stack;\r\n\r\n    // TODO: Does it make more sense to use Context?\r\n    if (this.props.children && this.props.children.length) {\r\n      childrenWithProps = this.props.children.map((child, index) => {\r\n        return (\r\n          child &&\r\n          React.cloneElement(child, {\r\n            viewportIndex: this.props.viewportIndex,\r\n            key: index,\r\n          })\r\n        );\r\n      });\r\n    }\r\n\r\n    const newImageHandler = ({ currentImageIdIndex, sopInstanceUid }) => {\r\n      const { displaySet } = this.props.viewportData;\r\n      const { StudyInstanceUID } = displaySet;\r\n\r\n      if (currentImageIdIndex > 0) {\r\n        this.props.onNewImage({\r\n          StudyInstanceUID,\r\n          SOPInstanceUID: sopInstanceUid,\r\n          frameIndex: currentImageIdIndex,\r\n          activeViewportIndex: viewportIndex,\r\n        });\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <ConnectedCornerstoneViewport\r\n          viewportIndex={viewportIndex}\r\n          imageIds={imageIds}\r\n          imageIdIndex={currentImageIdIndex}\r\n          onNewImage={newImageHandler}\r\n          onNewImageDebounceTime={700}\r\n          // ~~ Connected (From REDUX)\r\n          // frameRate={frameRate}\r\n          // isPlaying={false}\r\n          // isStackPrefetchEnabled={true}\r\n          // onElementEnabled={() => {}}\r\n          // setViewportActive{() => {}}\r\n          {...this.props.customProps}\r\n        />\r\n        {childrenWithProps}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OHIFCornerstoneViewport;\r\n"],"sourceRoot":""}